<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JP大学习</title>
    <url>/2024/10/18/JP%E5%A4%A7%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>l m h 轻中重</p>
<p>p k 拳脚</p>
<h3 id="板边压制"><a href="#板边压制" class="headerlink" title="板边压制"></a>板边压制</h3><h4 id="关于站重拳5hp打到后的后续"><a href="#关于站重拳5hp打到后的后续" class="headerlink" title="关于站重拳5hp打到后的后续"></a>关于站重拳5hp打到后的后续</h4><p>1，低点5hp取消普通裂隙，+15，选择放帧用12f的5hk打乱动</p>
<p>2，低点5hp取消地刺，接od裂隙，+4，</p>
<ul>
<li>最速投择</li>
<li>2mk取消26mk打乱动</li>
</ul>
<p>3，低点5hp取消od裂隙，偷帧地刺+2，5hp打点越高加越多</p>
<ul>
<li>偷帧地刺可以破凹一气</li>
<li>被防+2，站&#x2F;蹲轻拳取消中下波择，择到(放帧)6hk踢起来取消26mp</li>
</ul>
<p>连段选择</p>
<p>1，版中确反，5hk取消24lphp 5mk取消26mp jhk 5hk 22mk</p>
<p>2，确反换边，5hk取消24lphp 前走反向 6hk踢起来</p>
<p>3，版中一气斩杀，26hp起飞，66 绿冲5hp取消5hk 5hp取消一气</p>
<p>4，重风神od地刺接2气，22kk取消二气，24hp，66，前跳，26mp 26mp</p>
]]></content>
      <categories>
        <category>happy</category>
      </categories>
      <tags>
        <tag>street fighter 6</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2024/12/09/MySQL/</url>
    <content><![CDATA[<h2 id="行格式"><a href="#行格式" class="headerlink" title="行格式"></a>行格式</h2><h3 id="1，页存在的意义"><a href="#1，页存在的意义" class="headerlink" title="1，页存在的意义"></a>1，页存在的意义</h3><ul>
<li>页作为内存和磁盘交互的单位，如果每读一条记录，就从磁盘io到内存一条，会很慢</li>
</ul>
<h3 id="2，MyISAM的默认行格式compact"><a href="#2，MyISAM的默认行格式compact" class="headerlink" title="2，MyISAM的默认行格式compact"></a>2，MyISAM的默认行格式compact</h3><ul>
<li>行格式内容<ul>
<li>变长字段列表</li>
<li>null值列表</li>
<li>记录头信息<ul>
<li>记录的类型：0是普通记录，1是数据项记录，2是最小记录，3是最大记录</li>
<li>是否被删除：1代表被标记了删除，等待进入删除列表</li>
<li>拥有的记录数:作为组的最后一条记录，这个值就是那一组的记录数量</li>
<li>记录在本页的位置：？</li>
<li>是否是某层非叶子节点的最小索引列值所在的记录</li>
</ul>
</li>
<li>用户记录</li>
<li>隐藏列记录：roll_point,transaction_id,row_id(如果没定义主键和唯一键，会生成row_id作为主键)</li>
</ul>
</li>
</ul>
<h3 id="3，char-M-是否是变长字段-看字符集"><a href="#3，char-M-是否是变长字段-看字符集" class="headerlink" title="3，char(M)是否是变长字段(看字符集)"></a>3，char(M)是否是变长字段(看字符集)</h3><ul>
<li>M代表字符数，字符不够会用空格填充</li>
<li>如果字符集中，每个字符都是一样的字节数，那么总的字节数是不会变的，就不是变长字段</li>
<li>如果字符集中，存在不同的字节数的字符，例如utf8-mb4,那么无法确定最后的字节数，就是变长字段</li>
<li>char使用空格占位，实际是用少量的空间，减小了产生内存碎片的概率：当char字段的值，在M个字符内变化时，复用原本的内存空间就可以，假如没有占位，char字段的每次增加</li>
</ul>
<h3 id="4，varchar-M-中的M可以无限大吗-不行"><a href="#4，varchar-M-中的M可以无限大吗-不行" class="headerlink" title="4，varchar(M)中的M可以无限大吗(不行)"></a>4，varchar(M)中的M可以无限大吗(不行)</h3><ul>
<li>M指的字符数</li>
<li>mysql规定每条记录，除隐藏列外，其余所有字段值加起来的大小不能超过65535字节</li>
<li>M的最大值除了和该varchar列值的大小有关，还和字符集最大字符所需的字节数有关，规定65535-其他字段长度，再除字符集最大字符长度，可以获得M允许的最大值，超过这个值在定义表结构会报错</li>
</ul>
<h3 id="5，列溢出"><a href="#5，列溢出" class="headerlink" title="5，列溢出"></a>5，列溢出</h3><ul>
<li>指的是变长字段长度过大，无法保证MySQL规定的每页至少存下两条记录的规定，就会把该字段值的一部分存到其他页中，并记录指针</li>
<li>compact格式会在原字段值的位置，存768字节的数据+存到其它页的数据的指针</li>
<li>dynamic格式，只会在原字段值的位置存指针，所有数据放到其它页中</li>
</ul>
<h3 id="6，引擎的默认行格式"><a href="#6，引擎的默认行格式" class="headerlink" title="6，引擎的默认行格式"></a>6，引擎的默认行格式</h3><ul>
<li>MyISAM使用的compact</li>
<li>innodb使用的dynamic</li>
<li>区别就是compact列溢出时会保留768字节到原字段值的位置</li>
</ul>
<h2 id="页格式"><a href="#页格式" class="headerlink" title="页格式"></a>页格式</h2><h3 id="1，页的组成"><a href="#1，页的组成" class="headerlink" title="1，页的组成"></a>1，页的组成</h3><ul>
<li>文件头：存放的是每个类型的页的通用的东西<ul>
<li>页号</li>
<li>上下页指针：双向链表连接同层级每一页</li>
<li>页所属表空间</li>
<li>页类型：索引用的是索引页，也叫数据页</li>
<li>检验和：用于和文件尾的检验和配合，判断是否是完整的页</li>
</ul>
</li>
<li>页头：记录页的状态<ul>
<li>当前页的页目录的槽的数量</li>
<li>未分配的空间最小地址，是下次分配的起始点</li>
<li>当前记录数量，包括最大最小和已删除的</li>
<li>页中第一个被删除的记录的地址，作为删除链表的头节点</li>
<li>暂未使用的，待更新(TODO)</li>
</ul>
</li>
<li>用户记录：页内单链表连接</li>
<li>空闲空间</li>
<li>页目录：存的是分组后的存放着最大索引列的记录的偏移地址，根据该记录的偏移地址可以获取记录的索引列的值，来完成2分法操作判断要查找的数据在哪个组</li>
<li>文件尾：检验和，配合文件头<ul>
<li>假如检验和前后不相同，说明页是错的，可能只刷新了一般就被打断了</li>
</ul>
</li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="1，innodb的聚簇索引"><a href="#1，innodb的聚簇索引" class="headerlink" title="1，innodb的聚簇索引"></a>1，innodb的聚簇索引</h3><ul>
<li>聚簇索引，是b+树结构，叶子节点是有完整数据的数据页</li>
<li>同一层级，页中的数据按照主键大小排，页中的记录会被分组，最小记录单独一组，中间记录4-8条一组，含有最大记录可以1-8条一组；每组最后一条的偏移地址存在数组中，供查找的时候二分法找到组，然后遍历组中的记录即可</li>
<li>非叶子节点存的是数据项记录，每一条数记录指向一个页，记录的内容是主键+下一层级页号+下一级页中记录的最小主键值；因为在叶子节点非常多的时候，先找到页才能进入页使用二分法，找页只能双向链表遍历，因此，使用页中的数据项记录指向叶子节点，可以利用数据项页中使用2分法找到记录，然后去找记录对应的页号，这样就使用2分法替换了链表遍历</li>
</ul>
<h3 id="2，二级索引"><a href="#2，二级索引" class="headerlink" title="2，二级索引"></a>2，二级索引</h3><ul>
<li>二级索引的叶子节点中的记录内容是索引列+主键，先查出主键再利用主键回表去聚簇索引获取完整数据</li>
<li>二级索引的非叶子节点记录内容是索引列+主键+下一层级页号+下一级页的记录的最小值，如果索引列相同，将会用主键来决定顺序</li>
<li>每一层级整体都是按照索引列来排的，相同时才会使用主键</li>
</ul>
<h3 id="3，联合索引"><a href="#3，联合索引" class="headerlink" title="3，联合索引"></a>3，联合索引</h3><ul>
<li>使用多个列联合成一个索引</li>
<li>叶子节点记录内容是所有的索引列+主键</li>
<li>非叶子节点记录的内容是所有的索引列+主键+下一级页号对应的页的最小索引列值；这里的索引列规则是，从左到右判断</li>
</ul>
<h3 id="4，MyISAM的索引"><a href="#4，MyISAM的索引" class="headerlink" title="4，MyISAM的索引"></a>4，MyISAM的索引</h3><ul>
<li>每条记录挨个存到一个文件中，记录中存储在文件中的偏移值</li>
<li>b+树记录中叶子节点存的是索引列加索引列对应的偏移地址，相当于全部都是innodb的二级索引，查到后根据偏移地址来进行查询，查询是随机存取的，这一步很快</li>
</ul>
<h3 id="5，添加和删除索引"><a href="#5，添加和删除索引" class="headerlink" title="5，添加和删除索引"></a>5，添加和删除索引</h3><ul>
<li>添加<ul>
<li>在创建表结构时，index idx_xxx(列)</li>
<li>创建完表后，alter table 表名 add index idx_xxx(列)</li>
</ul>
</li>
<li>删除<ul>
<li>alter table 表名 drop index 索引名</li>
</ul>
</li>
</ul>
<h2 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h2><h3 id="1，什么情况可以用到索引"><a href="#1，什么情况可以用到索引" class="headerlink" title="1，什么情况可以用到索引"></a>1，什么情况可以用到索引</h3><ul>
<li>索引里的数据是有序的，主要是通过多个2分查找快速获取想要的记录集：</li>
<li>全值匹配时：查询的条件一一对应索引列，&#x3D;号连接<ul>
<li>先用第一个条件2分查到满足第一个条件的所有记录</li>
<li>在满足第一个条件的记录中，2分查找满足第二个条件的记录</li>
<li>由于查每个条件的时候，对于这个条件的列来说，数据都是有序的，所以每次查询都是用2分法，也就是使用了索引</li>
</ul>
</li>
<li>匹配左边的列：对于联合索引来说，索引是按照左到右的索引顺序排序的，左同按右排，因此在查询是，遵循从左到右查即可保证每次查之前的数据都是有序的<ul>
<li>不能跳过中间列，跳过后，后面的列不能用索引，因为要保证左边列相同右边才会有序</li>
</ul>
</li>
<li>匹配字符串列的前缀：字符串类型的每一个字符都满足左边先排序，左边相等右边再排序，因此在模糊查询的时候，使用xx%才可以使用索引快速查找</li>
<li>匹配范围值：只有第一个条件用到索引，因为第一个条件查询结果是一个范围，只有在值一样时第二个条件才有序，范围里的值不一样</li>
<li>排序：和联合索引的使用一样，符合联合索引的排序，结果就是联合索引本身，不需要计算，注意联合索引的列的值都是升序的，排序要么全升序，要么全降序(把从链表顺序读到的值反着放就好)</li>
<li>分组：也是利用联合索引，每个相同的条件为一组，如果分组条件满足联合索引，那么分组后的每一个组在索引中都是相邻的，直接拿就可以</li>
</ul>
<p>总结：</p>
<ul>
<li>在每一步查询之前，如果查询的目标(数据集)是按查询条件排序的，那就可以用索引，例如，用name作为条件查之前，先看数据是否是按name排好序的，是的话就可以用2分法，也就是用索引</li>
<li>索引的列只能是原始列，不可以是表达式和函数式，否则失效，会拿着表达式或者函数式整体去作条件，而不是索引列</li>
<li>回表的代价很高，通过主键回表，但是主键在二级索引中是无序的，也就是说通过主键在聚簇索引查，分布不均在很多页中，页是内存io基本单位，就会发生多次io；因此，mysql优化器会判断回表数量对效率的影响来使用全表查询还是二级索引加回表的方案；排序用的是联合索引，最好使用limit减少数据结果集来降低回表次数</li>
</ul>
<h3 id="2，建立索引的规范"><a href="#2，建立索引的规范" class="headerlink" title="2，建立索引的规范"></a>2，建立索引的规范</h3><ul>
<li>经常作为查询条件的列</li>
<li>用于排序和分组的列</li>
<li>列基数大的列(相同的值少)</li>
<li>建立索引的列尽量小</li>
<li>字符串作索引列时，如果值很长，使用前几位建立索引就好，索引查询到一个范围后遍历</li>
<li>使用自增主键可以明显减少页分裂</li>
<li>使用覆盖索引可以不用回表操作</li>
<li>联合索引经常会和其他建的索引冗余，为主键建立其他索引会导致重复</li>
</ul>
<h2 id="3，索引的代价"><a href="#3，索引的代价" class="headerlink" title="3，索引的代价"></a>3，索引的代价</h2><ul>
<li>更大的磁盘空间占用</li>
<li>每次增删改都会更新索引，增删可能还会导致页分裂，效率降低</li>
</ul>
<h2 id="单表访问"><a href="#单表访问" class="headerlink" title="单表访问"></a>单表访问</h2><h3 id="1，访问方法"><a href="#1，访问方法" class="headerlink" title="1，访问方法"></a>1，访问方法</h3><ul>
<li>const<ul>
<li>指的是使用聚簇索引和唯一二级索引做等值查询，(唯一的联合索引需要每一个列都等值)，不包括唯一索引使用null作条件的查询，因为唯一索引的null可能会有多个</li>
<li>总之就要保证查询的结果是一行数据</li>
</ul>
</li>
<li>ref<ul>
<li>使用二级索引进行等值查询的时候，但是必须保证在使用联合索引时，左边列是等值</li>
<li>const使用null作查询，实际上会使用ref方式</li>
</ul>
</li>
<li>ref or null<ul>
<li>在使用二级索引等值查询之外，还顺带查出所有的值为null的记录</li>
<li>例如，name&#x3D;’张三’ or name IS NULL</li>
</ul>
</li>
<li>range<ul>
<li>可以把ref获得的结果叫做单点范围，因为范围的值都是一样的；如果有多个单点范围，或者有连续范围(范围内有不相同的值)，使用的查询方法将会是range</li>
</ul>
</li>
<li>index<ul>
<li>不满足索引使用条件时可能使用</li>
<li>如果需要的结果列，查询条件列都包含在某个二级索引里，可以遍历二级索引的叶子结点，判断是否满足条件，满足则取出结果列，不需要会标</li>
<li>对比直接聚簇索引全表扫描，二级索每条记录的内容更少，遍历成本低</li>
</ul>
</li>
<li>all<ul>
<li>聚簇索引全表扫描</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>amazon</title>
    <url>/2024/08/03/amazon/</url>
    <content><![CDATA[<h3 id="货物运输状态管理"><a href="#货物运输状态管理" class="headerlink" title="货物运输状态管理"></a>货物运输状态管理</h3><p>在shipment管理里面，用运单号查询运输状态：</p>
<img src="https://zxrpicbed.oss-cn-guangzhou.aliyuncs.com/image/image-20240806154722502.png" alt="image-20240806154722502" style="zoom:50%;" />

<ul>
<li><p>1，注意选择后台的站点</p>
</li>
<li><p>2，点进shipment-&gt;manage Shipments，根据运单号搜要看的运单</p>
</li>
<li><p><img src="https://zxrpicbed.oss-cn-guangzhou.aliyuncs.com/image/image-20240806155433695.png" alt="image-20240806155433695"></p>
</li>
<li><p>运输状态</p>
<ul>
<li><p>working是没有确认，点击4，进去填上这个确认号：</p>
</li>
<li><p><img src="https://zxrpicbed.oss-cn-guangzhou.aliyuncs.com/image/image-20240806155602064.png" alt="image-20240806155602064"></p>
</li>
<li><p>shipped是已发货</p>
</li>
<li><p>in transit是运输中，可以查询系统的到货时间，提交到表格：</p>
</li>
<li><p><img src="https://zxrpicbed.oss-cn-guangzhou.aliyuncs.com/image/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="无标题"></p>
</li>
<li><p>设置到货时间为系统预测时间，并且更新时间到企业微信表格，日更···</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>DianShang</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/08/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>AccessKey ID：zxrLTAI5tJ2X5xUgPqRDLZNLbfy</p>
<p>AccessKey Secret: zxrhXjVwZVaKBcswugf9kRJyMfQbzi8wF</p>
<p>bucketname:zxrpicbed</p>
<p>地域:oss-cn-guangzhou</p>
]]></content>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2024/12/07/mybatis/</url>
    <content><![CDATA[<p>mybatis配置文件</p>
<ul>
<li><p>配置环境，数据源：environments&lt;environment标签</p>
</li>
<li><p>配置mapper文件的位置 ：mappers&lt;mapper标签</p>
<ul>
<li>按包扫描mapper文件时mappers&lt;package name&#x3D;，xml的名字还起着和mapper接口对应的作用，所以在使用时要注意：<ul>
<li>1，mapper文件放的层级和mapper接口的层级一样,也就是包一致</li>
<li>2，mapper文件的名字和接口名一致</li>
</ul>
</li>
</ul>
</li>
<li><p>配置properties文件的位置，引用使用${}：properties标签</p>
</li>
<li><p>设置类型别名typeAlias&lt;typeAlia type&#x3D;;alias&#x3D;;可以有效避免由于resultType需要的全限定名过长难写的问题，别名不区分大小写</p>
<ul>
<li>除了上面为单个类设置别名的方式，还可以指定某个包所有类以类名为别名，不区分大小写typealais&lt;package name&#x3D;；</li>
</ul>
</li>
</ul>
<p>mybatis mapper文件和接口的对应</p>
<ul>
<li>一张表，对应一个mapper接口，对应一个mapper文件，对应一个实体类</li>
<li>mapper接口对应mapper文件的命名空间</li>
<li>mapper接口的方法，对应mapper文件的sql id</li>
</ul>
<p>接口中的参数如何传递到sql语句？</p>
<ul>
<li>${},#{}</li>
<li>单个字面量的传递，大括号随便填就可以</li>
<li>多个字面量，mybatis会存到一个map中，默认的键是arg0，arg1····，或者param0，param1···；值就是参数顺序的参数值<ul>
<li>获取的时候，直接大括号里写arg0或param0这种就可以获取到值了</li>
</ul>
</li>
<li>多个字面量，为避免使用默认的arg0这种键，可以先在service把参数手动打包成map，再直接传入map类型的参数<ul>
<li>这样获取的时候，就可以通过大括号中写自己定义的键获取自己定义的值</li>
</ul>
</li>
<li>多个字面量，可以使用@Param注解，给每个参数指定mybatis存储的键<ul>
<li>大括号里填注解指定的键可以获取值</li>
</ul>
</li>
<li>对象类性，mybatis自动使用属性的名字为键，属性值为值，创建map<ul>
<li>大括号填属性名即可</li>
</ul>
</li>
</ul>
<p>结论：参数的获取实际上和接口方法声明的参数名没有关系</p>
<p>结果集如何指定返回格式？</p>
<ul>
<li>单条数据用对象接收，或者用map(接口和resultType都是)，key是属性名，v是值</li>
<li>多条在接口用List接收，resulttype是list元素类型</li>
<li>多条也可以用map接收，必须接口@MapKey()指定map的key，每一条记录的json作为v；或者直接使用map列表，返回多个map</li>
</ul>
<p>默认使用#{}，什么时候只能用${}？</p>
<ul>
<li><p>主要是有没有单引号的关系</p>
</li>
<li><p>模糊查询，使用like ‘%${}%’;like “%”#{}”%”;like concat(‘%’,#{},’%’)</p>
</li>
<li><p>批量删除使用了in，in ${ids},#{}会为每个id加单引号，执行没结果</p>
</li>
<li><p>动态表名使用参数作为表名，表名是不可以有单引号的</p>
</li>
</ul>
<p>如何同时修改有关联的两张表？</p>
<p>例子：往班级表插入一个班级，分配一些学生(把学生的班级改为插入的班级)</p>
<p>步骤：</p>
<ul>
<li>插入班级</li>
<li>查询该班级的自增id(插入之前这个值是空，自动生成的)，所以必须查</li>
<li>根据条件获取一部分学生，更改他们的班级id</li>
</ul>
<p>优化：在插入后自动回调将id返回给对象</p>
<ul>
<li>设置insert标签参数，useGeneratedKeys&#x3D;”true”,keyProperty&#x3D;”id”(对象的自增主键属性名)</li>
<li>在执行insert之后，再去看传入的班级对象参数，已经把id属性设置成了插入了的班级的id</li>
<li>直接用这个id修改学生班级id</li>
</ul>
<p>字段名和属性名不同咋办？</p>
<ul>
<li>设置underScoreToCamelCase完成下划线和驼峰转换</li>
<li>在sql语句查询的时候为字段设置别名</li>
<li>@TableField(“user_name”)注解在实体类属性上，和表字段对应</li>
<li>使用resultmap</li>
</ul>
<p>1对多咋办？</p>
<p>例子，一个班级对应多个学生，在班级类应当有一个list<student>属性，难以对此属性赋值，因为要通过班级id关联查询</p>
<ul>
<li>使用collection标签，记忆：集合属性用collection标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;classAndStudentResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Class&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;class_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    再封装学生列表，指定list属性名，指定list元素类型</span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studentId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;student_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用分步操作+懒加载</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">		</span></span><br><span class="line"><span class="tag">      <span class="attr">指定第二步对应的接口</span>          <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">指定第二步接口需要的参数</span></span></span><br><span class="line"><span class="tag">				<span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line">第二步</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>多对一呢？</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>分步</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结，多对一和一对多都是通过级联查询，第一次只查出了某个属性的一部分，必须把手动第二部分的东西封装到属性里</p>
<p>动态sql标签</p>
<ul>
<li>使用if来判断条件是否满足</li>
<li>使用where来自动生成where，并且自动清除sql前部分的and和or，注意后部分不能去除</li>
</ul>
<h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><ul>
<li>1，作用范围：<ul>
<li>一级缓存是SQL session级别的，默认开启，同一个SQL session内相同的sql语句将会使用缓存而不是查询数据库</li>
</ul>
</li>
<li>2,如何开启：<ul>
<li>自动开启</li>
</ul>
</li>
<li>3，缓存有效使用的条件：<ul>
<li>同一个SQL session下操作</li>
<li>一模一样的sql语句</li>
<li>查询之间没有经历过增删改操作，增删改操作会导致数据库的内容和缓存的内容不一样，mybatis会直接删除缓存</li>
<li>查询之间没有手动调用清理方Sqlsession.clearCatch()</li>
</ul>
</li>
</ul>
<h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><ul>
<li><p>1，作用范围</p>
<ul>
<li>二级缓存是namespace级别的，一般一个mapper接口对应一个mapper文件对应一个namespace</li>
</ul>
</li>
<li><p>2，开启过程</p>
<ul>
<li><p>全局设置中&lt;setting name&#x3D;”cacheEnabled” value&#x3D;”true”&#x2F;&gt;,默认就是true，可以不用手动设置该选项</p>
</li>
<li><p>在要开启的namespace中使用catche标签配置</p>
</li>
<li><pre><code class="xml">&lt;mapper namespace=&quot;com.example.mapper.UserMapper&quot;&gt;
    &lt;!-- 配置二级缓存 --&gt;
    &lt;cache 
        eviction=&quot;LRU&quot; 
        flushInterval=&quot;60000&quot; 
        size=&quot;512&quot; 
        readOnly=&quot;true&quot;/&gt;
    &lt;!-- SQL语句 --&gt;
&lt;/mapper&gt;
</code></pre>
</li>
<li><p>表对应的java实例对象要实现序列化接口并设置版本号，因为可能有持久化到磁盘</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>ps</title>
    <url>/2024/08/18/ps/</url>
    <content><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="移动和选区"><a href="#移动和选区" class="headerlink" title="移动和选区"></a>移动和选区</h3>]]></content>
      <categories>
        <category>图片视频处理</category>
      </categories>
      <tags>
        <tag>ps教程</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2024/12/30/redis/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitMQ</title>
    <url>/2024/12/25/rabbitMQ/</url>
    <content><![CDATA[<h2 id="1，RabbitMQ架构"><a href="#1，RabbitMQ架构" class="headerlink" title="1，RabbitMQ架构"></a>1，RabbitMQ架构</h2><p><img src="https://zxrpicbed.oss-cn-guangzhou.aliyuncs.com/image/image-20241225222848029.png" alt="image-20241225222848029"></p>
<ul>
<li>1，整体架构：<ul>
<li>发布者-&gt;交换机-&gt;消息队列-&gt;消费者</li>
<li>可以用virtualHost隔离，每一个由若干交换机和消息队列组成</li>
</ul>
</li>
<li>2，组件功能<ul>
<li>交换机：负责路由和转发消息</li>
<li>消息队列：负责存储消息</li>
</ul>
</li>
<li>3，数据隔离<ul>
<li>每个项目可以创建多个用户，有不同的权限，每个用户可以有多个virtualHost</li>
</ul>
</li>
</ul>
<h2 id="2，使用Java代码"><a href="#2，使用Java代码" class="headerlink" title="2，使用Java代码"></a>2，使用Java代码</h2><ul>
<li>1，引入依赖starter，在yaml文件配置<ul>
<li>host：rabbitMQ运行的主机地址</li>
<li>port：rabbitMQ端口号</li>
<li>username：用户名</li>
<li>password：密码</li>
<li>virtualHost：数据隔离空间</li>
</ul>
</li>
</ul>
<h2 id="3，rabbitMQ的组成"><a href="#3，rabbitMQ的组成" class="headerlink" title="3，rabbitMQ的组成"></a>3，rabbitMQ的组成</h2><ul>
<li>1，生产者</li>
<li>2，交换机</li>
<li>3，消息队列</li>
<li>4，消费者</li>
<li>5，数据隔离virtualhost，每个virtualhost可以有若干交换机和队列组成，virtualhost之间互相隔离</li>
<li>6，用户管理，每个用户可以有多个virtualhost</li>
</ul>
<h2 id="4，rabbitMQ原理"><a href="#4，rabbitMQ原理" class="headerlink" title="4，rabbitMQ原理"></a>4，rabbitMQ原理</h2><ul>
<li>1，生产者发消息给交换机</li>
<li>2，交换机把消息转发给队列，不负责存储</li>
<li>3，队列存储和管理消息，队列绑定交换机</li>
<li>4，消费者绑定队列消费</li>
</ul>
<h2 id="5，work-queues模型"><a href="#5，work-queues模型" class="headerlink" title="5，work queues模型"></a>5，work queues模型</h2><ul>
<li><p>1，定义</p>
<ul>
<li>当生产者信息多时可以使用多个消费者，绑定同一个队列，一起消费同一个队列</li>
</ul>
</li>
<li><p>2，问题</p>
<ul>
<li>消费者的能力不同，但是队列消息是平均分配给消费者的，导致能力强的消费者没有任务可执行</li>
</ul>
</li>
<li><p>3，解决</p>
<ul>
<li>配置每次只取一条消息，只有处理完了之后再去取</li>
</ul>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">    <span class="attr">rabbitmq:</span> </span><br><span class="line">        <span class="attr">listener:</span> </span><br><span class="line">            <span class="attr">simple:</span> </span><br><span class="line">                <span class="attr">prefetch:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="6，rabbitMQ交换机类型"><a href="#6，rabbitMQ交换机类型" class="headerlink" title="6，rabbitMQ交换机类型"></a>6，rabbitMQ交换机类型</h2><ul>
<li>1，fanout：广播交换机，队列绑定交换机只需要提供空key(“”)即可，每次对交换机发消息都会广播到所有绑定了交换机的队列</li>
<li>2，direct：订阅交换机，队列绑定交换机的时候要提供一个key，只有交换机会根据消息中的key来路由到不同的队列</li>
<li>3，topic：通配符订阅交换机，队列绑定的时候可以用通配符，消息中的key如果满足通配符，就会路由到该队列里面<ul>
<li>key一般使用word1.word2.word3····的形式</li>
<li>#代表0或任意多层单词，*代表任意一层单词</li>
</ul>
</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">张三.18.男</span><br><span class="line">可以使用：</span><br><span class="line">张三.#</span><br><span class="line">张三.*.*</span><br><span class="line">张三.18.*</span><br><span class="line">#(全部key都接收到队列)</span><br></pre></td></tr></table></figure>

<ul>
<li>4，headers：基于mq的消息头匹配(少用)</li>
</ul>
<h2 id="7，springAMPQ分别使用java配置类和注解来配置"><a href="#7，springAMPQ分别使用java配置类和注解来配置" class="headerlink" title="7，springAMPQ分别使用java配置类和注解来配置"></a>7，springAMPQ分别使用java配置类和注解来配置</h2><ul>
<li>1，原理：springAMPQ为创建交换机，创建队列，交换机和队列的绑定都定义了专门的类以供使用</li>
<li>2，具体类：<ul>
<li>交换机：<ul>
<li>FanoutExchange </li>
<li>directExchange</li>
<li>topicExchange</li>
</ul>
</li>
<li>队列：<ul>
<li>Queue</li>
</ul>
</li>
<li>绑定：<ul>
<li>Binding</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>3，使用spring配置类示例：<ul>
<li>在配置类中创建三个对象，生产者发消息指定交换机和key，消费者绑定队列即可：</li>
</ul>
</li>
</ul>
<p><em><strong>对象创建以及绑定key</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意，对象名是方法名，指定的参数是交换机名</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;directExchange&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Direct队列，注意，对象名是方法名，指定的参数是队列名</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">directQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;directQueue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Direct绑定</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">directBinding</span><span class="params">(Queue directQueue, DirectExchange directExchange)</span> &#123;</span><br><span class="line">    <span class="comment">//将队列绑定在交换机上，并且指定绑定的key</span></span><br><span class="line">    <span class="keyword">return</span> BindingBuilder</span><br><span class="line">        .bind(directQueue)</span><br><span class="line">        .to(directExchange)</span><br><span class="line">        .with(<span class="string">&quot;directRoutingKey&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><em><strong>生产者发送消息</strong></em>:需要注入RabbitTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送Direct消息,需要交换器名，队列绑的key，消息内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendDirectMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;directExchangeName&quot;</span>, <span class="string">&quot;user.name&quot;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送Fanout消息，key用空字符串表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendFanoutMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;fanoutExchangename&quot;</span>, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em><strong>消费者</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收Direct消息，自动接收，消息由spring放在参数中，需要指定消费的队列</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;directQueueName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveDirectMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Received Direct Message: &quot;</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>4，使用注解配置队列和绑定</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以在配置类使用注解创建三个对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Exchange(name = &quot;directExchange&quot;, type = ExchangeTypes.DIRECT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">declareDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 注解会自动声明交换机，这里不需要实现具体的方法体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个队列</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Queue(name = &quot;myQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">declareQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 注解会自动声明队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用@QueueBinding注解来声明队列和绑定</span></span><br><span class="line"><span class="meta">@QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;myQueue&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;directExchange&quot;, type = &quot;direct&quot;),</span></span><br><span class="line"><span class="meta">    key = &quot;myRoutingKey&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">declareBinding</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 注解会自动声明绑定</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">也可以在消费者直接声明交换机，队列，绑定</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;myQueue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;auto.exch&quot;, ignoreDeclarationExceptions = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">    key = &quot;orderRoutingKey&quot;)</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8，消息转换器"><a href="#8，消息转换器" class="headerlink" title="8，消息转换器"></a>8，消息转换器</h2><ul>
<li>1，springAMQP默认使用的是jdk序列化<ul>
<li>对象序列化成立字节流，中途不可读</li>
<li>只能在java程序之间传输，依赖readObject和writeObject方法</li>
<li>jdk对象序列化会记录一些类的信息，导致传输的文件比原始的要大</li>
<li>字节流传输有安全风险，是可变的，变化之后无法进行反序列化</li>
</ul>
</li>
<li>2，配置json消息转换器，得益于springboot自动装配，只需要配置Jackson的bean就可以覆盖原来的转换器、</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">    <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jackson2JsonMessageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span></span><br><span class="line">    jackson2JsonMessageConverter.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jackson2JsonMessageConverter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意需要同时在生产者和消费者模块都引入Jackson，生产者用于序列化，消费者用于反序列化</li>
<li>setCreateMessageIds可以在序列化的时候为消息加上一个id，用于幂等性判断</li>
</ul>
<h2 id="9，生产者可靠性"><a href="#9，生产者可靠性" class="headerlink" title="9，生产者可靠性"></a>9，生产者可靠性</h2><ul>
<li><p>1，mq的客户端连接不上mq：失败重试机制</p>
<ul>
<li>spring.rabbitmq.connection-time: 1s，指定了一秒没连上服务器为超时</li>
<li>spring.rabbitmq.template.retry<ul>
<li>.enable&#x3D;true，开启重试</li>
<li>.initial-interval: 1000ms,每次重试的初始等待时间</li>
<li>multiplier&#x3D;1，下次重试的等待时间是这次的多少倍，下次时间&#x3D;初始时间+上次时间*倍数</li>
<li>max-attempts，最大重试次数</li>
</ul>
</li>
<li>注意：这个重试是阻塞式，会阻塞线程，要么禁用要么短一点，200ms左右</li>
</ul>
</li>
<li><p>2，生产者确认机制</p>
<ul>
<li><p>publisher return：消息进入交换机，但是没有正确路由到队列，会返回异常信息</p>
</li>
<li><p>publisher confirm：</p>
<ul>
<li>消息进入交换机，进入非持久化队列，直接返回ack</li>
<li>进入交换机，进入持久化队列，持久化完成后返回ack</li>
<li>进入交换机，路由失败(无法路由到任何队列)，返回ack</li>
<li>进入持久化队列，未成功持久化，返回nack</li>
<li>未能进入任何交换机，返回nack</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>只有nack的情况，需要设置重发代码，路由失败一般都是代码问题</li>
<li>由于路由失败是代码问题，因此不要开启publisher return，无法靠这个解决代码逻辑问题</li>
<li>对于nack的处理，做有限次的重试，重试失败记录异常信息即可</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="10，消息的可靠性"><a href="#10，消息的可靠性" class="headerlink" title="10，消息的可靠性"></a>10，消息的可靠性</h2><ul>
<li>1，为了防止rabbitmq宕机导致的数据丢失，要对交换机，队列，队列中的消息都做持久化，设置他们的durable属性为true即可</li>
<li>2，队列中的消息，之前是全部存到内存中<ul>
<li>问题：<ul>
<li>宕机或者重启，全部消息都会消失</li>
<li>消息占满内存只能往磁盘写，会阻塞生产者线程直到所有持久化完毕</li>
</ul>
</li>
<li>解决：3.6.0开始默认使用lazyQueue<ul>
<li>队列接收到消息直接存在磁盘中</li>
<li>消费者需要消费时再去取<ul>
<li>好处是可存储的消息数量增加，不会长时间阻塞生产者线程</li>
<li>得益于io优化，实际上这种方案比内存操作然后阻塞刷新到磁盘会快得多</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="11，消费者的可靠性"><a href="#11，消费者的可靠性" class="headerlink" title="11，消费者的可靠性"></a>11，消费者的可靠性</h2><ul>
<li>1，消费者确认机制，在消费者方法执行后，要给消息队列返回一个结果，展示是否消费成功以及后续操作<ul>
<li>ack：消费成功，rabbitmq应该将此消息直接从队列删除</li>
<li>nack：消费处理失败，应当重发</li>
<li>reject：处理失败且拒绝，但是从队列中删除，不再重发</li>
</ul>
</li>
<li>2，使用springamqp的消费者确认机制</li>
</ul>
<p>配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">none</span> <span class="comment"># 不做处理</span></span><br></pre></td></tr></table></figure>



<ul>
<li>none：失败了不做处理，不返回，会直接从队列中删除消息</li>
<li>manual：手动处理，自己在逻辑中调用api决定什么时候返回ack和nack</li>
<li>auto(推荐):自动模式，使用了aop环绕，在代理对象调用消费方法时出现运行时异常会返回nack，出现比如消息转化异常等消息处理和校验异常，会返回reject</li>
<li>3，失败重试机制：消费者返回nack时，会重新给消费者，再次调用消费者方法，一直不成功就会一直往复，可以配置重试机制，防止无限制重新入队</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费者失败重试</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 初识的失败等待时长为1秒</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置重试次数，重试时间</li>
<li>4，失败处理策略：当重试次数用完后重试还是失败，会调用失败处理策略<ul>
<li>RejectAndDontRequeueRecoverer：springamqp默认机制，重试后还是失败会直接拒绝，返回reject</li>
<li>ImmediateRequeueMessageRecoverer：本地重试失败后返回reject，重新入队列</li>
<li>RepublishMessageRecoverer：设置一个专门的交换机，配置一个队列，消费者监听队列消息，有消息可以发送邮件，人工来处理</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//只有开启了消费者重试机制，才需要对重试后还是失败的消息进行处理</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.rabbitmq.listener.simple.retry.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorMessageConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定交换机和队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个MessageRecoverer对象，实现类为RepublishMessageRecoverer，也就是重试次数用完后，发送到指定交换机，需要指定客户端，交换机，以及发送消息时的key</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;error.direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-幂等性保证"><a href="#12-幂等性保证" class="headerlink" title="12,幂等性保证"></a>12,幂等性保证</h2><ul>
<li>1，在消息放一个id，可以使用JacksonMessageConvertor生成，也可以使用自己生成的id在发送的时候带上<ul>
<li>当消费者拿到消息，判断redis或者mysql里面是不是有这个id，有的话代表执行过，没有的话这次才能执行</li>
</ul>
</li>
</ul>
<h2 id="13-延迟消息的实现"><a href="#13-延迟消息的实现" class="headerlink" title="13,延迟消息的实现"></a>13,延迟消息的实现</h2><ul>
<li>1，使用插件，下载插件放在rabbitmq的插件目录，在创建交换机的时候设置delay属性为true，发送的时候使用setdelay方法设置时间(ms)，就会自动在交换机里等时间到了才会放到队列</li>
<li>2，使用死信队列，可以为一个队列设置死信交换机<ul>
<li>死信：<ul>
<li>队列中过期的消息</li>
<li>队列超过设置的最大值，待得最久的消息</li>
<li>rejecte或者nack的，并且设置不能重入队的消息</li>
</ul>
</li>
<li>某个队列的死信消息会直接发往死信交换机，只需要设置一个死信交换机，给它榜一个队列就可以操作死信</li>
</ul>
</li>
<li>3，利用两个交换机和两个队列<ul>
<li>第一组交换机和队列，队列不设置消费者，给消息设置定时时间，让它在队列里过期成为死信</li>
<li>第二组设置为死信交换机，以及用队列绑定该交换机，在设置的时间过了之后消息会被送到死信交换机，达到延迟消息的效果</li>
</ul>
</li>
</ul>
<h2 id="12-消息丢失"><a href="#12-消息丢失" class="headerlink" title="12,消息丢失"></a>12,消息丢失</h2><ul>
<li>1，三个可靠性</li>
</ul>
<h2 id="13，重复消费幂等性"><a href="#13，重复消费幂等性" class="headerlink" title="13，重复消费幂等性"></a>13，重复消费幂等性</h2><ul>
<li>1，使用uuid或者Jackson转换器生成id，利用redis或mysql暂存，执行前判断，已经有id存进去了表示执行过了</li>
</ul>
<h2 id="14，顺序发送"><a href="#14，顺序发送" class="headerlink" title="14，顺序发送"></a>14，顺序发送</h2><ul>
<li>1，把需要按顺序的放在一个额外的队列里面</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>亚马逊自学</title>
    <url>/2024/09/10/%E4%BA%9A%E9%A9%AC%E9%80%8A%E8%87%AA%E5%AD%A6/</url>
    <content><![CDATA[<h2 id="关键词库"><a href="#关键词库" class="headerlink" title="关键词库"></a>关键词库</h2><p>1，搜集竞品的asin，在搜索框搜关键词，取头部的竞品asin，10个</p>
<p>2，使用卖家精灵下载关键词</p>
<ul>
<li>关键词反查，单个单个查，多个需要在表里去重</li>
<li>流量词拓展，多个asin一起查，自动去重</li>
</ul>
<p>3，对关键词指标分析，排序，例如月搜索量</p>
<p>TODO 搞清各个指标对关键词的影响</p>
<p>4，词频分析，判断频率最高的单个，两个单词组成短语，三个词汇组成短语</p>
<ul>
<li>AMZ123词频统计工具：<a href="https://www.amz123.com/tools-wordcounter%E3%80%81">https://www.amz123.com/tools-wordcounter、</a></li>
<li>单个单词词频卖家精灵自动完成</li>
</ul>
<p>5,相关性查询，直接在亚马逊前台搜索看相关性</p>
<ul>
<li>强相关会出现在listing和广告</li>
<li>不相关要否定并且不能出现在listing</li>
</ul>
<p>6，细分关键词</p>
<ul>
<li>例如：蓝牙无线耳机-&gt;蓝牙，无线，耳机做词根</li>
</ul>
<p>7，不同语种，同义词</p>
<p>8，TODO，用H10进行关键词反查</p>
]]></content>
      <categories>
        <category>DianShang</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>优先准备</title>
    <url>/2024/11/29/%E4%BC%98%E5%85%88%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h2 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h2><h3 id="1，get-和-post请求的区别"><a href="#1，get-和-post请求的区别" class="headerlink" title="1，get 和 post请求的区别"></a>1，get 和 post请求的区别</h3><h4 id="延申：弄清楚http种常用不同请求的区别"><a href="#延申：弄清楚http种常用不同请求的区别" class="headerlink" title="延申：弄清楚http种常用不同请求的区别"></a>延申：弄清楚http种常用不同请求的区别</h4><ul>
<li>get：<ul>
<li>参数显示在地址栏，不安全，参数有长度限制，常用于获取资源，幂等</li>
</ul>
</li>
<li>post：<ul>
<li>参数放在请求体，也需要对参数加密，长度无限制，常用于增删改资源，不幂等</li>
</ul>
</li>
<li>put：<ul>
<li>参数放请求体，用于更新</li>
</ul>
</li>
<li>delete：<ul>
<li>参数放请求头，用于删除指定位置的资源</li>
</ul>
</li>
<li>head</li>
</ul>
<h3 id="2，面向对象三个基本特征"><a href="#2，面向对象三个基本特征" class="headerlink" title="2，面向对象三个基本特征"></a>2，面向对象三个基本特征</h3><ul>
<li>封装：把类的属性私有，避免外部直接访问，提高程序安全性</li>
<li>继承：子类可以继承父类的变量和方法，复用代码的手段</li>
<li>多态：同一操作对于不同的对象有不同的解释，由重载和重写实现<ul>
<li>重载：同一个类中同名不同参数的方法</li>
<li>重写：子类重写父类方法提供子类的实现</li>
</ul>
</li>
</ul>
<h3 id="3，-和equals的区别"><a href="#3，-和equals的区别" class="headerlink" title="3，&#x3D;&#x3D;和equals的区别"></a>3，&#x3D;&#x3D;和equals的区别</h3><ul>
<li>&#x3D;&#x3D;可以作用与基本数据类型和引用类型<ul>
<li>基本数据类型，比较的是值是否相等</li>
<li>引用类型，比较的是对象的地址是否相等，无关对象内的内容</li>
</ul>
</li>
<li>equals只能作用于引用类型<ul>
<li>在不重写的情况下，方法内使用的是&#x3D;&#x3D;来判断</li>
</ul>
</li>
<li>注意：<ul>
<li>在使用对象当hashmap的key时：重写equals方法必须要重写hashcode方法，要保证对象相等的时候hashcode必须相同</li>
<li>原因：在hashmap中先根据hashcode计算桶，再根据equals判断是否是重复的key；假如equals成立(对象相同)，hashcode却不同，则hash冲突不会发生，equals方法不会被触发，造成相同的两个对象会被hash到不同的桶里，不符合hashmap key不重复的设计</li>
</ul>
</li>
</ul>
<h3 id="4，-和-，-和"><a href="#4，-和-，-和" class="headerlink" title="4，&amp;和&amp;&amp;，|和||"></a>4，&amp;和&amp;&amp;，|和||</h3><ul>
<li><p>A&amp;B：先判断A，再判断B是否true</p>
</li>
<li><p>A&amp;&amp;B：先判断A，如果A为false那么B直接不用判断，结果肯定为false，减少了一次判断</p>
</li>
<li><p>II和&amp;&amp;思路一样，短路系列前面能出结果那么后面的就不判断直接获得结果</p>
</li>
</ul>
<h3 id="5-stringbuilder-string-stringbuffer的区别"><a href="#5-stringbuilder-string-stringbuffer的区别" class="headerlink" title="5,stringbuilder,string,stringbuffer的区别"></a>5,stringbuilder,string,stringbuffer的区别</h3><ul>
<li>string：不可变，每一次操作都返回一个新的对象</li>
<li>stringbuilder：可变</li>
<li>stringbuffer：同步的stringbuilder</li>
</ul>
<h3 id="6，重载和重写的区别"><a href="#6，重载和重写的区别" class="headerlink" title="6，重载和重写的区别"></a>6，重载和重写的区别</h3><ul>
<li>重载：同名方法，返回类型不限制，参数不同，可以是数量，类型，顺序不同，访问修饰符大于等于父类</li>
<li>重写：同名方法，参数相同，返回值不限制，修饰符大于等于父类</li>
</ul>
<h3 id="7-用过哪些集合"><a href="#7-用过哪些集合" class="headerlink" title="7,用过哪些集合"></a>7,用过哪些集合</h3><ul>
<li>arraylist</li>
<li>hashset</li>
<li>hashmap</li>
</ul>
<h3 id="8，list，set，map的区别"><a href="#8，list，set，map的区别" class="headerlink" title="8，list，set，map的区别"></a>8，list，set，map的区别</h3><ul>
<li>list和set继承自collection接口，map是另外的接口</li>
<li>list是有序线性的，set是无序线性的，map是无序kv结构</li>
</ul>
<h3 id="9，了解过的线程安全的集合"><a href="#9，了解过的线程安全的集合" class="headerlink" title="9，了解过的线程安全的集合"></a>9，了解过的线程安全的集合</h3><ul>
<li>hashtable，concurrenthashmap</li>
<li>copyonwritearraylist</li>
</ul>
<h3 id="10-hashmap的put原理？为什么hashmap容量设计成2的n次方"><a href="#10-hashmap的put原理？为什么hashmap容量设计成2的n次方" class="headerlink" title="10.hashmap的put原理？为什么hashmap容量设计成2的n次方"></a>10.hashmap的put原理？为什么hashmap容量设计成2的n次方</h3><ul>
<li>计算桶：(h^(h&gt;&gt;16))&amp;(table.length-1)</li>
<li>hash冲突了则去冲突的链表或者红黑树使用equals比较，不重复就插入到链表或者红黑树</li>
<li>容量设置2的n次方主要用于扩容减少计算量，table的长度*2，只需要判断多出来的那一位高位对应的(h^(h&gt;&gt;16))的值的那一位是1还是0，是1，&amp;后的结果就是1，就需要把桶的结果乘2得到新的桶，是0，&amp;的结果是0，桶的位置不变，；</li>
</ul>
<h3 id="11，arraylist和linkedlist的区别"><a href="#11，arraylist和linkedlist的区别" class="headerlink" title="11，arraylist和linkedlist的区别"></a>11，arraylist和linkedlist的区别</h3><ul>
<li>arraylist底层是数组，适合查询多，增删少的场景，查询可以根据下标</li>
<li>linkedlist底层使用的是双向链表，适合增删多的场景，查询只能遍历</li>
</ul>
<h3 id="12，throw和throws的区别"><a href="#12，throw和throws的区别" class="headerlink" title="12，throw和throws的区别"></a>12，throw和throws的区别</h3><ul>
<li>throws作用与方法，往外抛出异常</li>
<li>throw 是抛出异常</li>
</ul>
<h3 id="13，接口和抽象类的区别"><a href="#13，接口和抽象类的区别" class="headerlink" title="13，接口和抽象类的区别"></a>13，接口和抽象类的区别</h3><ul>
<li>一个类可以实现多个接口，但是只能继承一个父类</li>
<li>接口中只有方法声明，没有具体实现；抽象类可以有抽象方法，也可以有实现的犯法</li>
</ul>
<h3 id="14，去阿里巴巴手册看几个代码规范"><a href="#14，去阿里巴巴手册看几个代码规范" class="headerlink" title="14，去阿里巴巴手册看几个代码规范"></a>14，去阿里巴巴手册看几个代码规范</h3><ul>
<li>类名使用大驼峰命名，方法名和变量统一使用小驼峰</li>
<li>在关键的类，方法，参数等地方写注释</li>
<li>在捕获异常的时候，细分异常类型</li>
<li>创建线程池的时候，不要使用Executors工具类，使用threadpoolexecutor的构造方法</li>
</ul>
<h3 id="15，创建对象的三种方式"><a href="#15，创建对象的三种方式" class="headerlink" title="15，创建对象的三种方式"></a>15，创建对象的三种方式</h3><ul>
<li>new对象</li>
<li>使用反射创建</li>
<li>通过反序列化创建</li>
</ul>
<h3 id="16，如何通过反射创建对象"><a href="#16，如何通过反射创建对象" class="headerlink" title="16，如何通过反射创建对象"></a>16，如何通过反射创建对象</h3><ul>
<li>先获取类的入口class类：class.forName(全限定名)</li>
<li>再获取类的构造方法</li>
<li>执行构造方法即可</li>
</ul>
<h3 id="17，反射的使用场景是什么"><a href="#17，反射的使用场景是什么" class="headerlink" title="17，反射的使用场景是什么"></a>17，反射的使用场景是什么</h3><ul>
<li>spring中使用</li>
</ul>
<h3 id="18，反射的优缺点是什么"><a href="#18，反射的优缺点是什么" class="headerlink" title="18，反射的优缺点是什么"></a>18，反射的优缺点是什么</h3><ul>
<li>优点：在程序运行的时候可以动态的创建对象</li>
<li>缺点：性能比较低</li>
</ul>
<h3 id="19，掌握几个IO的常用类"><a href="#19，掌握几个IO的常用类" class="headerlink" title="19，掌握几个IO的常用类"></a>19，掌握几个IO的常用类</h3><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="1，线程和进程的区别"><a href="#1，线程和进程的区别" class="headerlink" title="1，线程和进程的区别"></a>1，线程和进程的区别</h3><ul>
<li>进程是计算机进行资源分配的基本单位，线程是计算机调度的基本单位</li>
<li>进程拥有独立的内存空间，io资源；线程共享同进程的内存空间和io资源</li>
<li>进程的上下文切换开销大，且进程之间的通信很麻烦；线程的上下文切换开销小，只需要记录寄存器和线程私有的东西，操作数栈，局部变量表</li>
</ul>
<h3 id="2，线程有几种创建方式，区别是什么"><a href="#2，线程有几种创建方式，区别是什么" class="headerlink" title="2，线程有几种创建方式，区别是什么"></a>2，线程有几种创建方式，区别是什么</h3><ul>
<li>3种：<ul>
<li>继承Thread类，重写run方法，调用对象的start方法即可创建一个线程</li>
<li>实现runnable接口，重写run方法，把runnable作为Thread类的构造参数,调用对象的start方法即可创建一个线程</li>
<li>实现callable接口，重写call方法，交给线程池的submit方法执行，返回一个futrue对象，调用futrue.get即可阻塞当前直到获取该callable的返回值</li>
</ul>
</li>
<li>区别：<ul>
<li>继承thread比较方便，但是java只能单继承，不灵活；run方法不支持返回值</li>
<li>实现runnable解决了继承不灵活的问题，但是也不支持返回值</li>
<li>callable配合线程池可以获取返回值，callable是接口也比较灵活</li>
</ul>
</li>
</ul>
<h3 id="3，线程的几种状态"><a href="#3，线程的几种状态" class="headerlink" title="3，线程的几种状态"></a>3，线程的几种状态</h3><ul>
<li>ready：还没有调用start方法之前</li>
<li>runnable：运行</li>
<li>waiting：等待，object.wait，</li>
<li>timedwaiting：超时等待</li>
<li>blocked：阻塞</li>
<li>terminal：终止</li>
</ul>
<h3 id="4，线程池的7大参数"><a href="#4，线程池的7大参数" class="headerlink" title="4，线程池的7大参数"></a>4，线程池的7大参数</h3><ul>
<li>核心线程数</li>
<li>最大线程数</li>
<li>非核心线程过期时间</li>
<li>时间单位</li>
<li>阻塞队列</li>
<li>拒绝策略</li>
<li>线程工厂</li>
</ul>
<h3 id="5，线程池工作原理"><a href="#5，线程池工作原理" class="headerlink" title="5，线程池工作原理"></a>5，线程池工作原理</h3><ul>
<li>先加入核心线程数</li>
<li>核心线程不够在看最大线程</li>
<li>最大线程不够在看阻塞队列够不够</li>
<li>阻塞队列不够看拒绝策略</li>
</ul>
<h3 id="6，阻塞队列有哪些，拒绝策略有哪些"><a href="#6，阻塞队列有哪些，拒绝策略有哪些" class="headerlink" title="6，阻塞队列有哪些，拒绝策略有哪些"></a>6，阻塞队列有哪些，拒绝策略有哪些</h3><ul>
<li>阻塞队列：</li>
<li>拒绝策略：<ul>
<li>丢弃</li>
<li>报错</li>
<li>丢弃最老任务</li>
<li>用户线程执行</li>
</ul>
</li>
</ul>
<h3 id="7，线程池submit和execute方法的区别"><a href="#7，线程池submit和execute方法的区别" class="headerlink" title="7，线程池submit和execute方法的区别"></a>7，线程池submit和execute方法的区别</h3><ul>
<li>execute没有返回值，只能接受一个个runnable参数，创建的线程内部出现异常，在线程内处理，不会返回到创建线程的线程</li>
<li>submit返回一个futrue，可以接受runnable和callable，接收runnable时返回null，线程出现异常会由future.get抛出，放到try catch可以捕获异常</li>
</ul>
<h3 id="8，公司使用的线程池，参数怎么设置，设置的依据"><a href="#8，公司使用的线程池，参数怎么设置，设置的依据" class="headerlink" title="8，公司使用的线程池，参数怎么设置，设置的依据"></a>8，公司使用的线程池，参数怎么设置，设置的依据</h3><h3 id="9，为什么不能使用Executors自带的线程池"><a href="#9，为什么不能使用Executors自带的线程池" class="headerlink" title="9，为什么不能使用Executors自带的线程池"></a>9，为什么不能使用Executors自带的线程池</h3><ul>
<li>参数写死，不能配置</li>
</ul>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="1，事务的特性"><a href="#1，事务的特性" class="headerlink" title="1，事务的特性"></a>1，事务的特性</h3><ul>
<li>原子性</li>
<li>隔离性</li>
<li>持久性</li>
<li>一致性</li>
</ul>
<h3 id="2，事务的隔离级别，Mysql默认的隔离级别"><a href="#2，事务的隔离级别，Mysql默认的隔离级别" class="headerlink" title="2，事务的隔离级别，Mysql默认的隔离级别"></a>2，事务的隔离级别，Mysql默认的隔离级别</h3><ul>
<li>隔离级别<ul>
<li>读未提交</li>
<li>读已提交</li>
<li>可重复读</li>
<li>序列化运行</li>
</ul>
</li>
<li>mysql默认可重复读，通过mvcc实现，极端情况会出现幻影读问题</li>
</ul>
<h3 id="3，事务的传播行为"><a href="#3，事务的传播行为" class="headerlink" title="3，事务的传播行为"></a>3，事务的传播行为</h3><ul>
<li>require new</li>
<li>require</li>
</ul>
<h3 id="4-不同的隔离级别在两个事务中会出现什么问题"><a href="#4-不同的隔离级别在两个事务中会出现什么问题" class="headerlink" title="4,不同的隔离级别在两个事务中会出现什么问题"></a>4,不同的隔离级别在两个事务中会出现什么问题</h3><ul>
<li>脏读 读未提交，读到还没有提交的事务写入的值</li>
<li>不可重复读 读已提交，同一个事务中，同一条sql读取出的结果不一样(修改)</li>
<li>幻影读 同一个事务中，同一个读取范围，读取出的条数不一样，(插入，删除)</li>
</ul>
<h3 id="5，sql调优流程举例，explain关键字的使用"><a href="#5，sql调优流程举例，explain关键字的使用" class="headerlink" title="5，sql调优流程举例，explain关键字的使用"></a>5，sql调优流程举例，explain关键字的使用</h3><p>+ </p>
<h3 id="6，b树和b-树的区别，为什么用b-树而不是b树"><a href="#6，b树和b-树的区别，为什么用b-树而不是b树" class="headerlink" title="6，b树和b+树的区别，为什么用b+树而不是b树"></a>6，b树和b+树的区别，为什么用b+树而不是b树</h3><h3 id="7，索引失效的情况"><a href="#7，索引失效的情况" class="headerlink" title="7，索引失效的情况"></a>7，索引失效的情况</h3><ul>
<li>使用了聚合函数</li>
<li>没有按最左的标准查</li>
</ul>
<h3 id="8，建立索引的依据"><a href="#8，建立索引的依据" class="headerlink" title="8，建立索引的依据"></a>8，建立索引的依据</h3><ul>
<li>经常查找的列</li>
<li>不经常修改的列</li>
<li>经常用于排序，分组的列</li>
<li>经常用于连接的列</li>
</ul>
<h3 id="9，Mysql最多创建多少个索引"><a href="#9，Mysql最多创建多少个索引" class="headerlink" title="9，Mysql最多创建多少个索引"></a>9，Mysql最多创建多少个索引</h3><h2 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h2><h3 id="1，什么是aop和ioc"><a href="#1，什么是aop和ioc" class="headerlink" title="1，什么是aop和ioc"></a>1，什么是aop和ioc</h3><h3 id="2，ioc的好处是什么"><a href="#2，ioc的好处是什么" class="headerlink" title="2，ioc的好处是什么"></a>2，ioc的好处是什么</h3><h3 id="3，aop有几种代理方式，有什么区别，默认哪种"><a href="#3，aop有几种代理方式，有什么区别，默认哪种" class="headerlink" title="3，aop有几种代理方式，有什么区别，默认哪种"></a>3，aop有几种代理方式，有什么区别，默认哪种</h3><ul>
<li>cglib：继承至原始类</li>
<li>jdk：实现原始类实现的接口，必须要原始类有接口</li>
<li>默认cglib</li>
</ul>
<h4 id="4，用到aop的地方"><a href="#4，用到aop的地方" class="headerlink" title="4，用到aop的地方"></a>4，用到aop的地方</h4><ul>
<li>日志，事务</li>
</ul>
<h3 id="5，-autowired和-resource的区别"><a href="#5，-autowired和-resource的区别" class="headerlink" title="5，@autowired和@resource的区别"></a>5，@autowired和@resource的区别</h3><h3 id="6，bean的作用域"><a href="#6，bean的作用域" class="headerlink" title="6，bean的作用域"></a>6，bean的作用域</h3><ul>
<li>singleton</li>
<li>prototype</li>
<li>request</li>
<li>session</li>
</ul>
<h3 id="7，spring自动装配有哪几种，有什么区别"><a href="#7，spring自动装配有哪几种，有什么区别" class="headerlink" title="7，spring自动装配有哪几种，有什么区别"></a>7，spring自动装配有哪几种，有什么区别</h3><ul>
<li>@Autowired，按类型装配</li>
<li>@Resource，先按名字装配，没有再按照类型装配</li>
</ul>
<h3 id="8，spring事务注解里面的参数设置，默认的隔离级别"><a href="#8，spring事务注解里面的参数设置，默认的隔离级别" class="headerlink" title="8，spring事务注解里面的参数设置，默认的隔离级别"></a>8，spring事务注解里面的参数设置，默认的隔离级别</h3><h3 id="9，springmvc的请求流程"><a href="#9，springmvc的请求流程" class="headerlink" title="9，springmvc的请求流程"></a>9，springmvc的请求流程</h3><ul>
<li>dispatchServelet获取请求，进行转发</li>
<li>转发至handlermapping，根据传入的url寻找匹配的handler，返回执行链给dispatchservelet</li>
<li>转发给handleradopter，适配可以执行的controller对象，执行handler，返回modeandview，返回给dispatchservelet</li>
<li>转发给视图解析器解析视图，返回给dispatchservelet</li>
<li>返回http请求</li>
</ul>
<h3 id="10，-和-的区别"><a href="#10，-和-的区别" class="headerlink" title="10，#{}和${}的区别"></a>10，#{}和${}的区别</h3><ul>
<li>#{}是使用占位符，里面的东西会被视为 一个参数，自动加单引号，可以避免sql注入</li>
<li>${}是sql拼接，不会加单引号，会被sql注入</li>
</ul>
<h3 id="11，mybatis实体类的字段和表字段不一样怎么办"><a href="#11，mybatis实体类的字段和表字段不一样怎么办" class="headerlink" title="11，mybatis实体类的字段和表字段不一样怎么办"></a>11，mybatis实体类的字段和表字段不一样怎么办</h3><ul>
<li>使用mybatis的resultmap</li>
<li>在实体类的上面加上小驼峰和下划线转换的注解</li>
<li>在实体类的字段上利用@Colum注解来对应数据库中的字段名</li>
</ul>
<h3 id="12，xml文件id是否能够重复"><a href="#12，xml文件id是否能够重复" class="headerlink" title="12，xml文件id是否能够重复"></a>12，xml文件id是否能够重复</h3><h3 id="13，什么是一级和二级缓存，区别是什么，怎么开启"><a href="#13，什么是一级和二级缓存，区别是什么，怎么开启" class="headerlink" title="13，什么是一级和二级缓存，区别是什么，怎么开启"></a>13，什么是一级和二级缓存，区别是什么，怎么开启</h3><h3 id="14，springboot自动装配的原理"><a href="#14，springboot自动装配的原理" class="headerlink" title="14，springboot自动装配的原理"></a>14，springboot自动装配的原理</h3><h3 id="15，如何解决前端和服务器端跨域问题"><a href="#15，如何解决前端和服务器端跨域问题" class="headerlink" title="15，如何解决前端和服务器端跨域问题"></a>15，如何解决前端和服务器端跨域问题</h3><ul>
<li>再后端http返回的时候带上允许跨域的源</li>
</ul>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="1，单例，工厂，责任链，代理，模板方法模式（理解）"><a href="#1，单例，工厂，责任链，代理，模板方法模式（理解）" class="headerlink" title="1，单例，工厂，责任链，代理，模板方法模式（理解）"></a>1，单例，工厂，责任链，代理，模板方法模式（理解）</h3><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="1，redis中常用的数据结构和区别"><a href="#1，redis中常用的数据结构和区别" class="headerlink" title="1，redis中常用的数据结构和区别"></a>1，redis中常用的数据结构和区别</h3><h3 id="2，redis数据结构使用场景举例"><a href="#2，redis数据结构使用场景举例" class="headerlink" title="2，redis数据结构使用场景举例"></a>2，redis数据结构使用场景举例</h3><ul>
<li>string，全局id</li>
<li>hash，对象</li>
<li>set，求交集，共同好友</li>
<li>zset，做排行榜</li>
<li>list，先进先出，做队列</li>
</ul>
<h3 id="3，redis和数据库的数据一致性"><a href="#3，redis和数据库的数据一致性" class="headerlink" title="3，redis和数据库的数据一致性"></a>3，redis和数据库的数据一致性</h3><ul>
<li>当更新请求打到数据库时，先更新数据库，再删除缓存</li>
<li>更新数据库的时候，先使用旧的缓存，会带来一段时间的不一致，无伤大雅</li>
<li>更新数据库和删除缓存应当是原子性的，且只有一个线程能运行，使用同步锁</li>
</ul>
<h3 id="4，缓存穿透，击穿，雪崩怎么处理"><a href="#4，缓存穿透，击穿，雪崩怎么处理" class="headerlink" title="4，缓存穿透，击穿，雪崩怎么处理"></a>4，缓存穿透，击穿，雪崩怎么处理</h3><ul>
<li>穿透：redis没有，MySQL也没有，导致无法建立缓存，攻击全部打数据库<ul>
<li>解决，redis和mysql都没有的时候，手动在redis创建一个空缓存，设置较短ttl，防止mysql在空缓存存在期间添加了后导致的不一致时间过长</li>
</ul>
</li>
<li>击穿：热点key过期时，大量的请求打到数据库<ul>
<li>解决，热点key不设置ttl，在java代码中设置逻辑过期时间，当过期后，先返回给旧值，同时创建一个线程去重建缓存</li>
</ul>
</li>
<li>雪崩：大量的key同时过期<ul>
<li>解决，同一时间上传的key应当设置不同时间的ttl，可以设置基准时间+随机时间</li>
</ul>
</li>
</ul>
<h3 id="5，redis持久化方式和区别"><a href="#5，redis持久化方式和区别" class="headerlink" title="5，redis持久化方式和区别"></a>5，redis持久化方式和区别</h3><ul>
<li>rdb快照：内存小，恢复快，间隔内的会丢失<ul>
<li>设置一段时间内修改多少次触发</li>
<li>也可以save手动触发，bgsave后台触发</li>
</ul>
</li>
<li>aof：存的是已经执行过的指令，内存大，恢复慢，间隔小，保存到文件，频繁io</li>
</ul>
<h3 id="6，redis内存溢出策略"><a href="#6，redis内存溢出策略" class="headerlink" title="6，redis内存溢出策略"></a>6，redis内存溢出策略</h3><ul>
<li>noeviction 不淘汰，内存满了有添加就报错，查询和删除可以正常使用</li>
<li>allkeys lru 淘汰最长时间没有访问过的key</li>
<li>allkeys lfu 淘汰访问频率最低的key</li>
<li>allkeys random 随机淘汰</li>
<li>volatile lru 定时key淘汰最长时间没访问的</li>
<li>volatile lfu 定时key中淘汰访问频率低的</li>
<li>volatile random 定时key随机淘汰</li>
<li>默认是noeviction</li>
</ul>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="1，linux常见指令，查看进程，内存占用，cpu使用，搜索关键字"><a href="#1，linux常见指令，查看进程，内存占用，cpu使用，搜索关键字" class="headerlink" title="1，linux常见指令，查看进程，内存占用，cpu使用，搜索关键字"></a>1，linux常见指令，查看进程，内存占用，cpu使用，搜索关键字</h3>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>商城支付</title>
    <url>/2024/11/12/%E5%95%86%E5%9F%8E%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<h2 id="1，内网穿透-natapp"><a href="#1，内网穿透-natapp" class="headerlink" title="1，内网穿透 natapp"></a>1，内网穿透 natapp</h2><p>1，使用netapp，获取公网ip</p>
<p><a href="https://natapp.cn/">https://natapp.cn/</a></p>
<ul>
<li>购买</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>卖家大学</title>
    <url>/2024/08/19/%E5%8D%96%E5%AE%B6%E5%A4%A7%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="listing组成"><a href="#listing组成" class="headerlink" title="listing组成"></a>listing组成</h3><ul>
<li>listing: 对商品的具体介绍</li>
</ul>
<p>1，分类</p>
<p>2，关键词</p>
<p>3，图片</p>
<p>4，品牌</p>
<p>5，标题</p>
<p>6，5点</p>
<p>7，描述(有A+会被A+顶替)</p>
<p>8，A+图文详情</p>
<h3 id="北美产品认证"><a href="#北美产品认证" class="headerlink" title="北美产品认证"></a>北美产品认证</h3><p><img src="https://zxrpicbed.oss-cn-guangzhou.aliyuncs.com/image/image-20240819222904797.png" alt="image-20240819222904797"></p>
<ul>
<li><p>食品药品安全</p>
</li>
<li><p>儿童安全</p>
</li>
<li><p>无线电通讯产品</p>
</li>
<li><p>蓝牙产品</p>
</li>
<li><p>机动车和配件</p>
</li>
<li><p>ic？</p>
</li>
</ul>
]]></content>
      <categories>
        <category>DianShang</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2024/08/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h4 id="1-给解压好的bochs配置安装文件-make编译，make-install安装"><a href="#1-给解压好的bochs配置安装文件-make编译，make-install安装" class="headerlink" title="1,给解压好的bochs配置安装文件,make编译，make install安装"></a>1,给解压好的bochs配置安装文件,make编译，make install安装</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">./configure</span> <span class="string">\</span> </span><br><span class="line"><span class="string">--prefix=/home/zxr/bochs_install</span> <span class="string">\</span> <span class="comment">#安装路径</span></span><br><span class="line"><span class="string">--enable-debugger</span> <span class="string">\</span> <span class="comment">#启用bochs自带的调试功能</span></span><br><span class="line"><span class="string">--enable-disasm</span> <span class="string">\</span> <span class="comment">#支持反汇编</span></span><br><span class="line"><span class="string">--enable-iodebug</span> <span class="string">\</span> <span class="comment">#开启io调试接口</span></span><br><span class="line"><span class="string">--enable-x86-debugger</span> <span class="string">\</span> <span class="comment">#支持x86调试器</span></span><br><span class="line"><span class="string">--with-x</span> <span class="string">\</span> <span class="comment">#使用xwindows</span></span><br><span class="line"><span class="string">--with-x11</span> <span class="comment">#x11图形用户界面</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意安装c和c++编译器，否则会编译失败</li>
</ul>
<h4 id="2-配置bochs的启动文件"><a href="#2-配置bochs的启动文件" class="headerlink" title="2,配置bochs的启动文件"></a>2,配置bochs的启动文件</h4><ul>
<li>启动文件不限定名字和后缀，使用bochsrc.disk放置安装根路径即可(输入的时候方便，只需要输入文件名)，也可以不在根，只不过要输入相对路径</li>
<li>配置虚拟计算机内存，硬盘启动，BIOS，VGABIOS，日志文件，鼠标，键盘映射，硬盘设置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">megs:</span> <span class="number">32</span> <span class="comment">#内存大小</span></span><br><span class="line"><span class="comment">#BIOS</span></span><br><span class="line"><span class="attr">romimage:</span> <span class="string">file=/home/zxr/bochs_install/bochs/share/bochs/BIOS-bochs-latest</span> </span><br><span class="line"><span class="comment">#VGABIOS</span></span><br><span class="line"><span class="attr">vgaromimage:</span> <span class="string">file=/home/zxr/bochs_install/bochs/share/bochs/VGABIOS-lgpl-latest</span> </span><br><span class="line"><span class="comment">#硬盘启动</span></span><br><span class="line"><span class="attr">boot:</span> <span class="string">disk</span></span><br><span class="line"><span class="comment">#日志输出文件路径，根目录&#x27;/&#x27;省略了</span></span><br><span class="line"><span class="attr">log:</span> <span class="string">bochs.out</span></span><br><span class="line"><span class="comment">#禁用鼠标</span></span><br><span class="line"><span class="attr">mouse:</span> <span class="string">enabled=0</span></span><br><span class="line"><span class="comment">#keyboard_mapping: enabled=1</span></span><br><span class="line"><span class="comment">#键盘映射</span></span><br><span class="line"><span class="string">keyboard:keymap=/home/zxr/bochs_install/bochs/share/bochs/keymaps/x11-pc-us.map</span></span><br><span class="line"><span class="comment">#硬盘设置</span></span><br><span class="line"><span class="attr">ata0:</span> <span class="string">enabled=1,ioaddr1=0x1f0,ioaddr2=0x3f0,irq=14</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在安装根键入 bin&#x2F;bochs,打开程序</li>
</ul>
<p><img src="https://zxrpicbed.oss-cn-guangzhou.aliyuncs.com/image/image-20240813235503043.png" alt="image-20240813235503043"></p>
<ul>
<li>输入2选择bochs配置文件，输入配置文件路径，读取成功</li>
</ul>
<h4 id="创建启动盘"><a href="#创建启动盘" class="headerlink" title="创建启动盘"></a>创建启动盘</h4><ul>
<li>使用bochs虚拟机自带的bin&#x2F;bximage指令</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">bin/bximage</span> <span class="string">.</span></span><br><span class="line"><span class="string">-fd创建软盘。</span></span><br><span class="line"><span class="string">-hd</span> <span class="string">创建硬盘。</span></span><br><span class="line"><span class="string">-mode</span> <span class="string">创建硬盘的类型，有flat</span> <span class="string">、sparse</span> <span class="string">、growing</span> <span class="string">三种。</span></span><br><span class="line"><span class="string">-size</span> <span class="string">指创建多大的硬盘，以MB</span> <span class="string">为单位。</span></span><br><span class="line"><span class="string">-q</span> <span class="string">以静默模式创建，创建过程中不会和用户交互。</span></span><br><span class="line"><span class="comment">#bin/bochs -hd -mode=&quot;flat&quot; -size=60 -q hdM60.img</span></span><br><span class="line"><span class="comment">#创建启动硬盘，大小60m，静默创造，名字叫hdM60.img</span></span><br></pre></td></tr></table></figure>

<ul>
<li>输入指令后，bochs会把需要写进配置文件的内容输出，复制进bochsrc.disk(配置文件)即可</li>
</ul>
<p><img src="https://zxrpicbed.oss-cn-guangzhou.aliyuncs.com/image/image-20240814235303276.png" alt="image-20240814235303276"></p>
<ul>
<li>启动硬盘创建完毕，注意，进入时是调试模式，输入c放行，q退出</li>
</ul>
<h3 id="编写mbr"><a href="#编写mbr" class="headerlink" title="编写mbr"></a>编写mbr</h3><p>1，为什么要把操作系统载入内存？</p>
<ul>
<li>内存的运行速度快</li>
<li>操作系统可以存在硬盘，软盘各种媒介，如果不统一放到一个地方，就会有对媒介的适配问题</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>自制操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>大汇总</title>
    <url>/2024/12/18/%E5%A4%A7%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ul>
<li><h2 id="1，并发编程的优缺点"><a href="#1，并发编程的优缺点" class="headerlink" title="1，并发编程的优缺点"></a>1，并发编程的优缺点</h2><ul>
<li>优点<ul>
<li>1，拆分复杂的业务，可以同时操作io和cpu</li>
<li>2，可以最大程度的利用多核cpu</li>
</ul>
</li>
<li>缺点<ul>
<li>1，线程从暂停(阻塞，等待)到运行切换需要进行上下文切换，很耗资源</li>
<li>2，多线程操作可能对临界区带来线程安全问题，比如一致性问题和死锁</li>
</ul>
</li>
</ul>
<h2 id="2，java中定位死锁"><a href="#2，java中定位死锁" class="headerlink" title="2，java中定位死锁"></a>2，java中定位死锁</h2><ul>
<li>1，去jdk的bin目录，使用jps指令来获取正在运行的jvm进程id</li>
<li>2，jstack -l  pid ,就直接可以看到死锁信息</li>
</ul>
<h2 id="3，如何创建线程"><a href="#3，如何创建线程" class="headerlink" title="3，如何创建线程"></a>3，如何创建线程</h2><ul>
<li>1，继承Thread类，调用对象start方法<ul>
<li>缺点，单继承</li>
</ul>
</li>
<li>2，实现runnable接口，传入Thread构造，调用Thread对象的start<ul>
<li>缺点，无返回值</li>
</ul>
</li>
<li>3，实现callable接口，交给线程池的submit方法执行，返回一个futrue，调用get方法阻塞获取返回值</li>
</ul>
<span id="more"></span>

<h2 id="4，java中线程的状态"><a href="#4，java中线程的状态" class="headerlink" title="4，java中线程的状态"></a>4，java中线程的状态</h2><ul>
<li>1，NEW<ul>
<li>start方法调用之前</li>
</ul>
</li>
<li>2，RUNNABLE<ul>
<li>调用start之后</li>
<li>由等待转化过来：notify、signal、unpark</li>
<li>获取到锁由阻塞转化过来</li>
</ul>
</li>
<li>3，WAITING<ul>
<li>等待通知或中断</li>
<li>调用Tread.sleep、object.wait、condition.await、Locksuport.park、thread.join、lock.lock获取锁失败后</li>
</ul>
</li>
<li>4，TIMED_WAITING<ul>
<li>带定时参数的WAITING</li>
</ul>
</li>
<li>5，BLOCKED<ul>
<li>进入synchronized方法，代码块，获取锁失败</li>
</ul>
</li>
</ul>
</li>
<li><p>6，TERMINAL</p>
<ul>
<li>执行完毕</li>
</ul>
<h2 id="5，线程的基本操作"><a href="#5，线程的基本操作" class="headerlink" title="5，线程的基本操作"></a>5，线程的基本操作</h2><ul>
<li>1，thread.interrupt<ul>
<li>改变thread线程的标志位</li>
</ul>
</li>
<li>2，thread.isInterrupt<ul>
<li>判断标志位是否改变</li>
</ul>
</li>
<li>3，Thread.isInterrupt(thread)<ul>
<li>判断标志位是否改变后，清除标志位</li>
</ul>
</li>
<li>4，thread.join<ul>
<li>调用后，当前线程会等待thread线程执行完，当前线程进入WAITING或者TIMED_WAITING状态</li>
</ul>
</li>
<li>5，Thead.sleep<ul>
<li>调用此方法的线程会睡眠，进入TIMED_WAITING状态</li>
<li>常与object.wait比较：<ul>
<li>区别是wait要先获取锁才能调用(同步块里),并且会释放锁</li>
<li>sleep随时调用，有锁也不会释放</li>
</ul>
</li>
</ul>
</li>
<li>6，守护线程<ul>
<li>守护线程是为非守护线程服务的线程，比如垃圾回收线程</li>
</ul>
</li>
<li>thread.setDaemon(true)设置为守护线程<ul>
<li>所有非守护线程执行完毕之后，jvm会直接关闭，并不会等待守护线程执行完，所以，不要在守护线程里写finally释放资源</li>
</ul>
</li>
</ul>
<h2 id="6，JMM是什么"><a href="#6，JMM是什么" class="headerlink" title="6，JMM是什么"></a>6，JMM是什么</h2><ul>
<li>1，JMM是java的内存模型，规定了java线程的通信模型以及线程之间如何完成同步<ul>
<li>java线程通信是共享内存模型：每个线程从主内存拿数据会在工作内存弄一个副本，修改后再同步到主内存</li>
</ul>
</li>
<li>2，对编译器制定了重排序的规则<ul>
<li>as-if-serial：在单线程中程序执行的结果不被改变</li>
</ul>
</li>
<li>happens before：JMM保证根据此规则编写正确的程序结果不被改变<ul>
<li>在确保以上两个规则实现的情况下，可以随意进行指令重排序</li>
</ul>
</li>
</ul>
<h2 id="7，happens-before的具体规则"><a href="#7，happens-before的具体规则" class="headerlink" title="7，happens-before的具体规则"></a>7，happens-before的具体规则</h2><ul>
<li>1，单线程中的每个操作，h-b此线程的之后任意操作</li>
<li>2，对一个监视器的加锁，h-b对这个监视器的解锁</li>
<li>3，对volatile的写，h-b任意对这个volatile的读</li>
<li>4，传递性，a h-b b,b h-b c,a h-b c</li>
</ul>
</li>
<li><p>5，start，某线程的start方法 h-b线程内的所有操作</p>
<ul>
<li>6，线程A调用B.join方法并成功返回，则b线程的所有操作h-bA线程</li>
</ul>
<h2 id="8，synchronized使用"><a href="#8，synchronized使用" class="headerlink" title="8，synchronized使用"></a>8，synchronized使用</h2><ul>
<li>1，方法上：进入方法时获取锁，方法结束或异常释放锁<ul>
<li>静态方法：锁类class对象</li>
<li>实例方法：锁this</li>
</ul>
</li>
</ul>
</li>
<li><p>2，代码块上</p>
<ul>
<li>手动指定对象，可以是任何类的class、this、任何实例对象</li>
</ul>
<h2 id="9，synchronized的原理"><a href="#9，synchronized的原理" class="headerlink" title="9，synchronized的原理"></a>9，synchronized的原理</h2><ul>
<li>1，每个锁对象的对象头的markword都关联了一个monitor，由monitor实际控制同步</li>
<li>2，获取到锁，monitor存储获取到锁的线程，只能有一个线程获取到锁</li>
<li>3，获取失败，进入monitor的阻塞队列，锁释放的时候唤醒阻塞队列的线程</li>
</ul>
</li>
<li><p>4，可重入性，monitor有计数器，获取到锁的线程再次获取，只需要计数器+1即可，无需执行monitorenter指令</p>
<ul>
<li>5，获取到锁执行monitorenter，释放执行monitorexit</li>
</ul>
<h2 id="10，synchronized的原子性，有序性，可见性"><a href="#10，synchronized的原子性，有序性，可见性" class="headerlink" title="10，synchronized的原子性，有序性，可见性"></a>10，synchronized的原子性，有序性，可见性</h2><ul>
<li>1，原子性<ul>
<li>Synchronized保证一系列操作这能被一个线程访问，不会被其他的线程打断，在其他线程的视角，这一系列操作执行时是不可见的</li>
</ul>
</li>
<li>2，有序性<ul>
<li>monitorenter happens-before monitorexit，这保证了同步块内的代码不会和同步块外的代码进行重排序</li>
</ul>
</li>
<li>3，可见性</li>
<li>Synchronized的内存语义就是，在线程释放锁的时候把自身的工作空间的内容刷新到主内存，在线程获取锁的时候，强行读取主内存最新的变量内容<ul>
<li>刷新到主内存的操作导致被其它所有线程可见</li>
</ul>
</li>
</ul>
<h2 id="11，Synchronized的锁分类，以及特点，场景"><a href="#11，Synchronized的锁分类，以及特点，场景" class="headerlink" title="11，Synchronized的锁分类，以及特点，场景"></a>11，Synchronized的锁分类，以及特点，场景</h2><ul>
<li>重量级锁<ul>
<li>特点：使用monitor监视器，当获取锁失败会直接进入阻塞队列</li>
<li>场景：适合在同步任务需要执行很久的时候使用，将线程阻塞降低cpu损耗</li>
</ul>
</li>
<li>轻量级锁：<ul>
<li>特点：<ul>
<li>加锁：不使用monitor，获取锁的时候，在虚拟机栈中创造一片锁空间，存储锁对象markword的内容，再将对象的markword存指向锁记录的指针；获取锁失败会自旋</li>
<li>解锁：尝试使用cas把索空间的内容重新赋值给对象的markword</li>
</ul>
</li>
<li>场景：适合同步任务需要执行的时间很短的情况，这种情况下，线程阻塞时间过短，上下文切换消耗的资源过多，不如使用自旋代替阻塞</li>
</ul>
</li>
<li>偏向锁：<ul>
<li>特点：<ul>
<li>加锁：把markword存到栈帧中的lockrecord里，markword存线程id；在此之后，只需要比较对象头的线程id和自身的id是否一样就可以了，就不用cas获取</li>
</ul>
</li>
<li>解锁：不会解锁，锁始终属于这个线程无论线程是否存活</li>
<li>场景：适合冲突极少，同步代码几乎都是单个线程执行的情况</li>
</ul>
</li>
</ul>
<h2 id="12，Synchronized锁升级的过程"><a href="#12，Synchronized锁升级的过程" class="headerlink" title="12，Synchronized锁升级的过程"></a>12，Synchronized锁升级的过程</h2><ul>
<li>1，轻量级锁升级到重量级：A线程获取了轻量级锁，B线程来尝试获取<ul>
<li>B自旋10获取锁：<ul>
<li>B线程先自旋cas十次，尝试把markword存到栈针并把对象对的markword改成指向栈帧的指针</li>
</ul>
</li>
<li>B改markword开启锁升级：<ul>
<li>获取锁依然失败，开启锁升级，先把锁对象的markword改变(临时的重量级锁指针)，让A线程释放锁时的cas操作失败</li>
</ul>
</li>
<li>A创建monitor、改对象头：<ul>
<li>·A线程释放锁失败后，先初始化monitor对象，再将自己栈中的锁对象的markword保存到monitor的一个变量中，再把对象头的markword指向monitor，再设置锁对象的对象头锁标志位为重量级锁00</li>
</ul>
</li>
<li>A唤醒B线程</li>
</ul>
</li>
<li>2，偏向锁升级到轻量级锁：锁偏向A线程，B线程来获取锁</li>
<li>B尝试cas替换markword为自己的线程id，失败执行锁升级<ul>
<li>暂停锁偏向的线程，检查是否还活着，线程没活着直接恢复无锁状态；活着的话，遍历栈帧中的锁纪录，锁记录中的markword和对象头的线程id，要么偏向B，要么恢复到无锁</li>
</ul>
</li>
</ul>
<h2 id="13，volatile的可见性和有序性"><a href="#13，volatile的可见性和有序性" class="headerlink" title="13，volatile的可见性和有序性"></a>13，volatile的可见性和有序性</h2></li>
<li><p>1，可见性：volatile写之后会直接刷新到主内存，并且其他线程在volatile读的时候强行读主内存中最新的，常用于标志位</p>
<ul>
<li>2，有序性：volatile使用内存屏障来实现happens-before规则：先执行的volatile写一定先于volatile读</li>
</ul>
<h2 id="14，lock接口的api"><a href="#14，lock接口的api" class="headerlink" title="14，lock接口的api"></a>14，lock接口的api</h2><ul>
<li>lock：获取锁，失败会阻塞</li>
<li>unlock：解锁，lock只能通过unlock解锁，就算出异常也不会自动释放锁</li>
<li>tryLock：获取锁，失败立即返回false</li>
</ul>
</li>
<li><p>tryLock(time):获取锁，一定时间内获取不到自动返回</p>
<ul>
<li>lockInterruptibly：可中断的获取锁，获取锁失败阻塞的线程，其他线程中断，会导致阻塞的线程取消获取锁并在此方法抛出异常</li>
</ul>
<h2 id="15，AQS的理解"><a href="#15，AQS的理解" class="headerlink" title="15，AQS的理解"></a>15，AQS的理解</h2><ul>
<li>1，AQS是同步器，面向锁的制造者，让程序员轻松自定义自己的锁</li>
<li>2，AQS提供了模板方法可以调用，模板方法定义了同步的逻辑，比如获取锁成功后，失败后，释放成功后，释放失败后，如何入阻塞队列，如何阻塞唤醒线程等等；以下是常用模板方法<ul>
<li><code>acquire(int arg)</code>：尝试获取独占锁，失败则入队列等待。</li>
<li><code>release(int arg)</code>：释放独占锁，并唤醒后继线程。</li>
<li><code>acquireShared(int arg)</code>：尝试获取共享锁，失败则入队列等待。</li>
<li><code>releaseShared(int arg)</code>：释放共享锁，并唤醒其他线程。</li>
<li><code>acquireInterruptibly(int arg)</code>：可中断地获取独占锁。</li>
<li><code>acquireSharedInterruptibly(int arg)</code>：可中断地获取共享锁。</li>
<li><code>tryAcquireNanos(int arg, long nanosTimeout)</code>：限时尝试获取独占锁。</li>
<li><code>tryAcquireSharedNanos(int arg, long nanosTimeout)</code>：限时尝试获取共享锁。</li>
<li><code>isQueued(Thread thread)</code>：判断线程是否在等待队列中。</li>
</ul>
</li>
<li>3，模板方法会调用可重写的方法，以下是常用可重写的方法<ul>
<li><code>tryAcquire(int arg)</code>：独占方式尝试获取资源，成功则返回true，失败则返回false。</li>
<li><code>tryRelease(int arg)</code>：独占方式尝试释放资源，成功则返回true，失败则返回false。</li>
<li><code>tryAcquireShared(int arg)</code>：共享方式尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</li>
</ul>
</li>
<li><code>tryReleaseShared(int arg)</code>：共享方式尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。<ul>
<li><code>isHeldExclusively()</code>：该线程是否正在独占资源。只有用到condition才需要去实现它。</li>
</ul>
</li>
</ul>
<h2 id="16，利用AQS自制锁"><a href="#16，利用AQS自制锁" class="headerlink" title="16，利用AQS自制锁"></a>16，利用AQS自制锁</h2><ul>
<li>1，定义自己的锁，实现lock接口</li>
<li>2，lock接口应当调用AQS的模板方法，定义匿名内部类，继承AQS，直接调用匿名内部类继承下来的模板方法<ul>
<li>之所以要继承AQS，是因为AQS的模板方法调用了AQS中可重写的方法，需要使用子类重写</li>
</ul>
</li>
<li>3，重写模板方法需要调用的protected方法，主要是定义加锁解锁逻辑：如何才算成功加锁，如何才算成功解锁</li>
<li>加锁解锁的逻辑是自定义的，只需要方法返回true，AQS就认为获取锁成功，反之返回false，AQS认为加锁失败，就会进行加入阻塞队列，排队等一系列操作</li>
<li>4，代码演示</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.AbstractQueuedSynchronizer;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SYNC</span> <span class="variable">sync</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SYNC</span>();</span><br><span class="line">    <span class="comment">//实现了lock的加锁和解锁，调用的是AQS的模板方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SYNC</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 加锁逻辑，定义什么情况是加锁成功，什么时候是加锁失败</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 加锁成功return ture，加锁失败返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1，逻辑，尝试将锁的state改为1，成功表示之前是0，没有线程加锁(cas)过，这次加锁成功</span></span><br><span class="line">            <span class="comment">//2，加锁成功要存储下获得了锁的线程，如果获取锁成功了，直接存当前线程</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(getState(),getState()+arg)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">            setState(getState()-arg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="17，ReentrantLock的可重入性实现"><a href="#17，ReentrantLock的可重入性实现" class="headerlink" title="17，ReentrantLock的可重入性实现"></a>17，ReentrantLock的可重入性实现</h2></li>
<li><p>1，在线程获取锁的时候，先判断是否被线程获取(lock.getExclusiveOwnerThread)</p>
<ul>
<li>2，如果没有被获取了，判断是否是当前线程，是的话给计数器加一，否的话获取锁失败进阻塞队列</li>
</ul>
<h2 id="18，ReentrantLock的公平锁和非公平锁"><a href="#18，ReentrantLock的公平锁和非公平锁" class="headerlink" title="18，ReentrantLock的公平锁和非公平锁"></a>18，ReentrantLock的公平锁和非公平锁</h2><ul>
<li>1，公平锁指的是，按照线程请求锁的时间，请求失败在阻塞队列排序</li>
<li>2，非公平锁指的是，线程获取锁失败后，会先自旋一段时间，如果在自旋时间内获取锁成功了，就省掉了一次从阻塞队列WAITING状态转化成RUNNABLE状态的上下文切换</li>
<li>3，优缺点对比:<ul>
<li>公平锁可能会比非公平锁多一些上下文切换，但是不会出现饥饿问题</li>
</ul>
</li>
</ul>
</li>
<li><p>4，默认:</p>
<ul>
<li>使用new的无参构造默认获取的是非公平锁，传入true为参数可获取公平锁</li>
</ul>
<h2 id="19，Condition的使用"><a href="#19，Condition的使用" class="headerlink" title="19，Condition的使用"></a>19，Condition的使用</h2><ul>
<li>1，使用Lock.newCondition()方法可以创建一个condition，每个lock能够关联多个condition，这也是和Synchronized的等待集合不同的点，每个monitor只支持一个waitset</li>
<li>2，当获取到lock锁之后，可以调用condition.await()方法，线程将会释放锁，并进入condition的等待队列中，等待队列是单链表，采用尾插法</li>
<li>3，获取到lock的线程可以调用signal方法，来唤醒等待队列的头结点，使头结点线程加入到lock的阻塞队列，可以争抢锁<ul>
<li>signalAll方法可以唤醒所有等待队列的线程，全部加入阻塞队列</li>
</ul>
</li>
<li>4，进入阻塞队列争抢到锁后，await方法才真正结束，原本await线程最终以获取到锁的状态继续执行</li>
<li>5，使用举例：A，B两个线程</li>
<li>A以想要的资源做条件来循环，条件也可以是标志位变量(注意用volatile修饰，在其他线程改标志位后第一时间拿到最新值)，循环刚开始调用await，线程释放锁，代码暂停<ul>
<li>B获取锁(获取锁才能使用signal)，给A资源(使A的循环条件为false)，B唤醒A，并释放锁，A在阻塞队列争抢到锁，第二次跳出循环(循环条件为false)，继续执行代码，执行完后释放锁</li>
</ul>
</li>
</ul>
<h2 id="20，LockSupport是干嘛用的"><a href="#20，LockSupport是干嘛用的" class="headerlink" title="20，LockSupport是干嘛用的"></a>20，LockSupport是干嘛用的</h2><ul>
<li><p>1，作用就是阻塞线程和唤醒线程</p>
</li>
<li><p>2，LockSupport的方法:以下方法全部都是类方法</p>
<ul>
<li>park</li>
<li>parkNanos</li>
<li>park(object)</li>
</ul>
</li>
<li><p>parkUntil()</p>
<ul>
<li>unpark(Thread)</li>
</ul>
</li>
<li><p>3，注意park对线程的阻塞不需要获取锁，而且可以直接指定解锁某一个线程、</p>
</li>
<li><p>4，condition的await和signal底层 就是调用的park，unpark，park是native方法</p>
</li>
</ul>
<h2 id="21，ConcurrentHashMap"><a href="#21，ConcurrentHashMap" class="headerlink" title="21，ConcurrentHashMap"></a>21，ConcurrentHashMap</h2><ul>
<li>1，HashMap在多线程并发下可能出现的问题<ul>
<li>写写覆盖：两个线程同时读取到桶为null，都觉得可以插入，线程1先插入成功，线程2再插入其他值覆盖了线程1的内容；实际上，他们只是发生了hash冲突，应该用拉链法形成链表</li>
<li>读写异常：遍历的时候，另一个线程对Hashmap的增删改操作，都会使遍历的方法抛出异常ConcurrentModificationException</li>
<li>删除期间put，导致的数据丢失：某线程先执行的删除某个桶的数据的指令，另一个线程要put那个桶，正常应该先删除，再添加，结果是添加成功；然而在删除未结束之前，添加就已经完成，就会删除了刚添加的，导致结果那个桶为空</li>
<li>扩容和删除同时进行导致的循环链表问题：扩容线程执行中途，有线程删除了链表的某节点</li>
</ul>
</li>
<li>2，ConcurrentHashMap的解决方案<ul>
<li>对于null桶覆盖，cas可以解决；对于成链表的桶的写入(头插法)要用Synchronized锁住头结点，来保证 遍历链表使用equals确定在链表插入的位置后再插入这一系列操作的原子性以及可见性 </li>
<li>遍历时修改表不会出异常，使用了volatile来保证可见性，node包含了K,V,next域，K是永远不变的，不用volatile；V要保证修改时可见，需要volatile；next变动报名有增加或者删除元素，需要可见性，要volatile</li>
</ul>
</li>
<li>使用Synchronized锁住头结点，删除和增加都竞争同一个锁<ul>
<li>扩容：todo</li>
</ul>
</li>
</ul>
<h2 id="22，CopyOnWriteArrayList"><a href="#22，CopyOnWriteArrayList" class="headerlink" title="22，CopyOnWriteArrayList"></a>22，CopyOnWriteArrayList</h2><ul>
<li>1，问题：在一个线程遍历ArrayList的时候，另一个线程做list的结构性更改，遍历的方法会抛出ConcurrentModificationException异常<ul>
<li>结构性更改：删元素；加元素；使用list的set方法改元素；拿出list中的数组，修改后再放回去</li>
</ul>
</li>
<li>2，解决：<ul>
<li>给arraylist对象加锁，每次使用对象都先获取互斥锁，不管是用来读还是写-&gt;不行，只读没有线程安全问题不能阻塞才对</li>
<li>使用读写锁可以保证多线程读，写的时候互斥，不能读也不能写，好处是高一致性，每次读都是最新值</li>
<li>CopyOnWriteArrayList:丢弃强一致性，什么情况下都可以读</li>
</ul>
</li>
<li>3，CopyOnWriteArrayList原理：<ul>
<li>有改结构性的操作，直接Arrays.copyOf复制一个数组，在那个里面操作，其他线程继续遍历原table数组</li>
<li>数组的引用变量是volatile的，复制的数组操作完了，要改list中变量的值，使其等于新数组的引用，volatile保证一改变其他线程新的线程操作list对象时都能拿到新的数组引用</li>
</ul>
</li>
</ul>
</li>
<li><p>4，遍历未完成的，换了数组，后半部分遍历咋办？</p>
<ul>
<li>迭代器创建时，会存下原数组的引用，使用迭代器引用的原数组来遍历，即使在遍历中CopyOnWriteArrayList的变量引用了新的数组，也和迭代器遍历的数组无关</li>
</ul>
<h2 id="23，BlockingQueue"><a href="#23，BlockingQueue" class="headerlink" title="23，BlockingQueue"></a>23，BlockingQueue</h2><h2 id="24，为什么要使用线程池"><a href="#24，为什么要使用线程池" class="headerlink" title="24，为什么要使用线程池"></a>24，为什么要使用线程池</h2><ul>
<li>1，线程复用</li>
</ul>
</li>
<li><p>2，核心线程会在创建线程池就创建，在运行时能更快的响应任务</p>
<ul>
<li>3，线程管理</li>
</ul>
<h2 id="25，ThreadPoolExecutor-线程池-的参数和原理"><a href="#25，ThreadPoolExecutor-线程池-的参数和原理" class="headerlink" title="25，ThreadPoolExecutor(线程池)的参数和原理"></a>25，ThreadPoolExecutor(线程池)的参数和原理</h2><ul>
<li>1，ThreadPoolExecutor的参数<ul>
<li>核心线程数</li>
<li>阻塞队列</li>
<li>最大线程数</li>
<li>空闲线程过期时间</li>
<li>过期时间单位</li>
<li>拒绝策略</li>
<li>线程工厂</li>
</ul>
</li>
<li>2，ThreadPoolExecutor的原理，任务到达后<ul>
<li>先用核心线程，核心线程不够，往下</li>
<li>使用阻塞队列，阻塞队列满了，往下</li>
</ul>
</li>
<li>线程没有超过最大线程，创建线程，超过了，往下<ul>
<li>拒绝策略：直接拒绝、抛出异常、丢弃最久没执行的任务、使用用户线程执行任务</li>
</ul>
</li>
</ul>
<h2 id="26，线程池的关闭方法"><a href="#26，线程池的关闭方法" class="headerlink" title="26，线程池的关闭方法"></a>26，线程池的关闭方法</h2><ul>
<li>shutdown<ul>
<li>标记线程池为关闭状态，拒绝接收新任务，等待正在执行的任务和阻塞队列中的任务执行完</li>
</ul>
</li>
</ul>
</li>
<li><p>shutdownNow</p>
<ul>
<li>尝试使用interrupt方法中断所有线程，是否能立即中断成功取决于线程是否对中断标志位做出反应；放弃所有阻塞队列的任务并返回一个list存储所有没执行的任务</li>
</ul>
<h2 id="27，Executors"><a href="#27，Executors" class="headerlink" title="27，Executors"></a>27，Executors</h2><ul>
<li>1，通过Executors工具类来创建4种线程池，4种线程池再构造方法调用的都是ThreadPoolExecutor的new方法，预写了不同的参数</li>
<li>2，FixedThreadPool：固定线程数线程池<ul>
<li>用户设置固定线程数，核心线程等于最大线程等于固定线程，说明不会有非核心线程出现</li>
<li>阻塞队列使用的没有指定长度的LinkedBlockingQueue，可以理解无界队列，长度Int最大值，说明永远不会使用非核心线程以及拒绝策略</li>
</ul>
</li>
<li>3，SingleThreadExector：线程数为1的固定线程池，队列也一样</li>
<li>4，CatchedThreadPool：只有非核心线程的线程池，线程总是按需创建<ul>
<li>无需传入任何参数</li>
<li>默认参数<ul>
<li>核心线程：0，说明阻塞队列不能放任务，否则队列中任务无法执行</li>
<li>队列：SynchronousQueue，这个队列没有容量，只传递任务</li>
<li>最大线程数：int最大值</li>
<li>非核心过期时间：60s</li>
<li>拒绝策略：不需要，因为最大线程数是无界的</li>
</ul>
</li>
</ul>
</li>
<li>5，缺点总结：<ul>
<li>Fixed和Single都使用的无界队列，当核心线程执行的速度小于任务添加进队列的速度，造成队列中任务无限积压；拒绝策略无法使用</li>
</ul>
</li>
<li>Catched最大线程数是无界的，高并发下出现大量线程同时运行，消耗完cpu资源<ul>
<li>都非常不实用，single有时可以作为异步操作的执行线程，其他几乎没用</li>
</ul>
</li>
</ul>
<h2 id="28，SchedulePoolExecutor"><a href="#28，SchedulePoolExecutor" class="headerlink" title="28，SchedulePoolExecutor"></a>28，SchedulePoolExecutor</h2><ul>
<li><p>1，使用定时线程池，最推荐方式</p>
<ul>
<li><pre><code class="java">//建议使用Excutors获取，和调用new是一样的
//输入核心线程数即可，队列使用的delayQueue
ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = 
    (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(5);
//Executors.newScheduledThreadPool返回的是ScheduledExecutorService，是一个接口，建议强转成子类，获取子类的方法


    /**
     * @param command：任务，可以是runnable或者是callable
     * @param delay 第一次等多长时间调用
     * @param unit 时间单位
     */
    public ScheduledFuture&lt;?&gt; schedule(Runnable command,long delay, TimeUnit unit);

    /**
     * @param initialDelay：第一次调用等多长时间
     * @param period：多久调用一次
     */
    public ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,
                                                  long initialDelay,
                                                  long period,
                                                  TimeUnit unit);

    /**
     * @param initialDelay：第一次调用等多长时间
     * @param delay：多久调用一次
     */
    public ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command,
                                                     long initialDelay,
                                                     long delay,
                                                   TimeUnit unit);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 2,调用方法的区别</span><br><span class="line"></span><br><span class="line">  + schedule，调用一次</span><br><span class="line">  + scheduleAtFixedRate：按固定的时间间隔调用，按上一次任务开始的时间算起</span><br><span class="line">    + 如果上一次调用的时间小于时间间隔，等待开始时间+时间间隔后再调用</span><br><span class="line">    + 如果上一次执行的时间超过了时间间隔，下一次会等上一次执行完后再立即调用</span><br><span class="line">+ scheduleWithFixedDelay：按固定的时间间隔调用，按上一次任务结束的时间算起</span><br><span class="line">    + 无论上一次执行的时间是多久，在上一次结束后，加上时间间隔就是这次开始执行的时间</span><br><span class="line"></span><br><span class="line">## 29，FutureTask简介和基本使用</span><br><span class="line"></span><br><span class="line">+ 1，介绍：FutureTask是Future接口的实现类，同时实现了Runnable接口</span><br><span class="line"></span><br><span class="line">+ 2，使用：</span><br><span class="line"></span><br><span class="line">  ~~~java</span><br><span class="line">  FutureTask&lt;String&gt; task = new FutureTask&lt;&gt;(() -&gt; &#123;</span><br><span class="line">              return Thread.currentThread().getName();</span><br><span class="line">          &#125;);</span><br><span class="line">          task.run();</span><br><span class="line">        System.out.println(task.get());</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>FutureTask可以包装callable或者runnable接口，无论run方法在哪个线程被调用，都可以利用get获取任务的返回值</p>
</li>
</ul>
</li>
<li><p>FutureTask实现了Runnable接口，可以把一个Callable传入FutrueTask，把FutureTask本身作为Runnable给线程池execute执行，也可以使用FutureTask.get获取Callable的返回值</p>
<ul>
<li>无需线程池，直接调用run方法后，使用get也能获取返回值</li>
</ul>
</li>
<li><p>3，FutureTask的状态变化</p>
<ul>
<li>未启动：调用FutureTask的run之前<ul>
<li>get：阻塞</li>
<li>cancel(flase&#x2F;true)：任务不会执行</li>
</ul>
</li>
<li>已启动：调用run之后<ul>
<li>get：阻塞</li>
<li>cancel(false):不起作用</li>
<li>cancel(true):尝试使用中断取消</li>
</ul>
</li>
<li>已完成：执行完成，或者任务期间cancel，或者任务期间异常</li>
<li>get：获取结果，或者抛出异常<ul>
<li>cancel：返回false</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="30，atomic包"><a href="#30，atomic包" class="headerlink" title="30，atomic包"></a>30，atomic包</h2><ul>
<li><p>1，原子基本类型</p>
<ul>
<li>AtomicInteger:getAndIncrement，IncrementAndGet，addAndGet(int i),getAndAdd(int i)<ul>
<li>要减法的话，直接i为负数即可</li>
</ul>
</li>
</ul>
</li>
<li><p>AtomicIong：类似</p>
<ul>
<li>AtomicBoolean：类似</li>
</ul>
<p>2，原子数组类型</p>
<ul>
<li>new AtomicIntegerArray(array[])：compareAndSet(index,expect,update)</li>
<li>要指明需要修改的数组元素<ul>
<li>注意修改的是AtomicIntegerArray中复制的一份数组，不会修改原数组，因此在使用下标获取的时候，要使用get(index)</li>
</ul>
</li>
</ul>
</li>
<li><p>3，原子引用类型，整体替换对象</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//创建一个原子引用对象</span></span><br><span class="line">  AtomicReference&lt;User&gt; UserAtomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">//初始对象和原子引用对象绑定</span></span><br><span class="line">  UserAtomicReference.set(user1);</span><br><span class="line">  <span class="comment">//改变对象</span></span><br><span class="line">  UserAtomicReference.compareAndSet(user2);</span><br><span class="line">  <span class="comment">//使用get可以获得改变之后的对象</span></span><br><span class="line">UserAtomicReference.get();</span><br></pre></td></tr></table></figure>

<ul>
<li>4，原子字段类型，改变单个字段的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  有三种：</span></span><br><span class="line"><span class="comment">  AtomicIntegeFieldUpdater</span></span><br><span class="line"><span class="comment">  AtomicLongFieldUpdater AtomicStampedReference</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">     </span><br><span class="line">  <span class="comment">//举例int类型,根据类方法newUpdater创建一个对象</span></span><br><span class="line">  AtomicIntegerFieldUpdater&lt;User&gt; name = AtomicIntegerFieldUpdater.newUpdater(User.class, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">  <span class="comment">//为指定对象的name字段修改值</span></span><br><span class="line">name.compareAndSet(对象，原值，新值)</span><br></pre></td></tr></table></figure>



<h2 id="31，CountDownLatch-倒计时"><a href="#31，CountDownLatch-倒计时" class="headerlink" title="31，CountDownLatch(倒计时)"></a>31，CountDownLatch(倒计时)</h2><ul>
<li>1，作用</li>
<li>指定倒计时的数量，调用等待方法的线程倒计时结束后才会继续运行</li>
<li>2，示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//创建5个倒计时</span></span><br><span class="line">  <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">5</span>);</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;开始等待&quot;</span>);</span><br><span class="line">                  <span class="comment">//调用await方法开始等待倒计时</span></span><br><span class="line">                  countDownLatch.await();</span><br><span class="line">                  <span class="comment">//倒计时减完后会继续运行</span></span><br><span class="line">                  System.out.println(<span class="string">&quot;等待完毕&quot;</span>);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;).start();</span><br><span class="line">          Thread.sleep(<span class="number">500</span>);</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">              <span class="comment">//打印倒计时数量，倒计时减1</span></span><br><span class="line">              System.out.println(<span class="string">&quot;还剩&quot;</span>+countDownLatch.getCount());</span><br><span class="line">              countDownLatch.countDown();</span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//控制台</span></span><br><span class="line">  开始等待</span><br><span class="line">  还剩<span class="number">5</span></span><br><span class="line">  还剩<span class="number">4</span></span><br><span class="line">  还剩<span class="number">3</span></span><br><span class="line">  还剩<span class="number">2</span></span><br><span class="line">  还剩<span class="number">1</span></span><br><span class="line">等待完毕</span><br></pre></td></tr></table></figure>

<ul>
<li>3，方法<ul>
<li>await，等待倒计时结束</li>
</ul>
</li>
<li>countDown，倒计时减1<ul>
<li>getcount，剩余倒计时次数</li>
</ul>
</li>
</ul>
<h2 id="32，CyclicBarrier"><a href="#32，CyclicBarrier" class="headerlink" title="32，CyclicBarrier"></a>32，CyclicBarrier</h2><ul>
<li>作用</li>
<li>循环栅栏，调用指定次数的await后哦，所有await将被放行，并可以再次调用await</li>
<li>使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//设定屏障拦截的数量，调用6次await后，6个await方法同时可以放行，并且这时runnable会被执行</span></span><br><span class="line">  <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">6</span>, () -&gt; System.out.println(<span class="string">&quot;同时出发&quot;</span>));</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      System.out.println(Thread.currentThread()+<span class="string">&quot;开始等待&quot;</span>);</span><br><span class="line">                      <span class="comment">//调用await表示该线程到达屏障，会阻塞等待其他线程</span></span><br><span class="line">                      cyclicBarrier.await();</span><br><span class="line">                      System.out.println(Thread.currentThread()+<span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;).start();</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//控制台</span></span><br><span class="line">  Thread[Thread-<span class="number">0</span>,<span class="number">5</span>,main]开始等待</span><br><span class="line">  Thread[Thread-<span class="number">3</span>,<span class="number">5</span>,main]开始等待</span><br><span class="line">  Thread[Thread-<span class="number">4</span>,<span class="number">5</span>,main]开始等待</span><br><span class="line">  Thread[Thread-<span class="number">5</span>,<span class="number">5</span>,main]开始等待</span><br><span class="line">  Thread[Thread-<span class="number">2</span>,<span class="number">5</span>,main]开始等待</span><br><span class="line">  Thread[Thread-<span class="number">1</span>,<span class="number">5</span>,main]开始等待</span><br><span class="line">  同时出发</span><br><span class="line">  Thread[Thread-<span class="number">1</span>,<span class="number">5</span>,main]开始执行</span><br><span class="line">  Thread[Thread-<span class="number">0</span>,<span class="number">5</span>,main]开始执行</span><br><span class="line">  Thread[Thread-<span class="number">3</span>,<span class="number">5</span>,main]开始执行</span><br><span class="line">  Thread[Thread-<span class="number">4</span>,<span class="number">5</span>,main]开始执行</span><br><span class="line">  Thread[Thread-<span class="number">2</span>,<span class="number">5</span>,main]开始执行</span><br><span class="line">Thread[Thread-<span class="number">5</span>,<span class="number">5</span>,main]开始执行</span><br></pre></td></tr></table></figure>

<ul>
<li>3，对比countDownLatch<ul>
<li>cyclicBarrier相当于可以重复使用的倒计时，全部到达了屏障(调用await)后，自动重置，可以再次await</li>
</ul>
</li>
<li>可以使用reset方法重置，避免某线程出异常或被中断，导致其余线程一直在await等它<ul>
<li>countDown方法不阻塞，所以可以在同一个线程倒计时多次；await是阻塞的，每一个线程调用一次就进阻塞状态了，不会再执行同一线程的第二次await代码，实际每个线程只能使用一次await</li>
</ul>
</li>
</ul>
<h2 id="33，Semaphore-信号量"><a href="#33，Semaphore-信号量" class="headerlink" title="33，Semaphore(信号量)"></a>33，Semaphore(信号量)</h2></li>
<li><p>作用：用于控制吞吐量，可以指定许可数量，每个线程要获取许可才能继续执行，许可用完后，想获得许可的线程阻塞等待其他线程释放许可</p>
<ul>
<li>理解：可以看作可以同时被指定个线程获取的锁，其余的线程需要阻塞等待锁释放</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//指定通行证的数量</span></span><br><span class="line">  <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="comment">//获取通行证，5次后阻塞</span></span><br><span class="line">  semaphore.acquire();</span><br><span class="line">  <span class="comment">//释放通行证，释放后可以被获取</span></span><br><span class="line">semaphore.release();</span><br></pre></td></tr></table></figure>



<h2 id="34，Exchanger-交换器"><a href="#34，Exchanger-交换器" class="headerlink" title="34，Exchanger(交换器)"></a>34，Exchanger(交换器)</h2><ul>
<li><p>作用，两个线程之间交换数据，只能是两个线程，不能是多个</p>
</li>
<li><p>示例</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//创建一个交换器</span></span><br><span class="line">  Exchanger&lt;String&gt; stringExchanger = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//A线程先调用exchange方法，把自己的数据存进交换器，阻塞等待B线程调用exchange方法，等待B把数据放进aResult中</span></span><br><span class="line">          <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">              <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;A线程的数据&quot;</span>;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="type">String</span> <span class="variable">aResult</span> <span class="operator">=</span> stringExchanger.exchange(a);</span><br><span class="line">                  System.out.println(<span class="string">&quot;A获得的数据=&quot;</span>+aResult);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">  <span class="comment">//B线程后调用，发现以经有A的数据，获取，交换自己的过去</span></span><br><span class="line">          <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">              <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;B线程的数据&quot;</span>;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="type">String</span> <span class="variable">bResult</span> <span class="operator">=</span> stringExchanger.exchange(a);</span><br><span class="line">                  System.out.println(<span class="string">&quot;B获得的数据=&quot;</span>+bResult);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          thread1.start();</span><br><span class="line">          Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">          thread2.start();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//打印结果</span></span><br><span class="line">  A获得的数据=B线程的数据</span><br><span class="line">B获得的数据=A线程的数据</span><br></pre></td></tr></table></figure>

<ul>
<li>注意<ul>
<li>只能两个线程之间交换数据</li>
</ul>
</li>
<li>会阻塞等待交换<ul>
<li>交换的数据就是exchange方法的返回值</li>
</ul>
</li>
</ul>
<h2 id="35，生产者消费者问题"><a href="#35，生产者消费者问题" class="headerlink" title="35，生产者消费者问题"></a>35，生产者消费者问题</h2></li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>大汇总</tag>
      </tags>
  </entry>
  <entry>
    <title>重要</title>
    <url>/2024/11/17/%E9%87%8D%E8%A6%81/</url>
    <content><![CDATA[<p>1，通过合作第三方获取资讯</p>
<p>新浪，百度，UC等</p>
<p>2，通过广告微服务，远程rpc获取要插入资讯的广告</p>
<ul>
<li>广告表：广告id，广告位置，广告名称，广告类型，广告状态</li>
<li>类型<ul>
<li>sdk广告：由客户端直接请求</li>
<li>api广告：由后端请求</li>
</ul>
</li>
</ul>
<p>3，获取第三方广告需要的时间长，可以和获取资讯两个任务并发执行，利用future，并把结果存到一个map里</p>
<p>4，插入自己公司想插入的信息流，一般增删改查</p>
<p>5，在最后需要广告的时候，可以使用future.get等待500ms，之后把map的广告插进信息流，不管map里是否有四个</p>
<p>6，话术：</p>
<ul>
<li>用户反馈切换页面时相应时间长</li>
<li>组长分配需求</li>
<li>公司的运维开发的链路追踪工具，可以一层一层看出接口的耗时</li>
<li>同步请求uc资讯和4个广告，耗时3秒左右</li>
<li>引入多线程，异步并行获取广告，放进map里</li>
<li>最后需要广告时判断map是否有，没有的话使用futrue的get方法多等待500ms，还是没有直接放弃广告</li>
<li>优化后结果，获取资讯0.6秒，广告并发0.5秒，总共1秒左右</li>
</ul>
<p>7，项目书写</p>
<ul>
<li>负责日常需求的开发和迭代(新的第三方资讯引入，banner菜单开发，快应用菜单开发)<ul>
<li>就是写banner表单&#x2F;快应用表单，提交后载入到管理系统</li>
<li>快应用就是点击直达的应用推荐</li>
<li>第三方返回的资讯字段：标题，副标题，资讯url，资讯分类，作者，图片，图片类型，创建时间</li>
<li>使用工厂和模板方法，优化第三方资讯拉取的方法<ul>
<li>之前是写死uc的资讯</li>
<li>改为工厂模式通过渠道(入参)获取不同实例，不同实例实现统一接口也就是模板方法模式</li>
<li>模板方法用于封装资讯，因为不同渠道讯息关键字不同，要统一封装一层返回给前端<ul>
<li>注意要把工厂的实例注入到spring，之后在工厂里直接get，否则会导致aop失效</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>和uc对接：<ul>
<li>带着密钥和频道id访问uc的验证接口，获取到token（为什么要给一个方法给他们调用才能获取token，那边直接http返回不行吗），存到redis，token和此频道id一一对应</li>
<li>访问时从redis根据频道id取token，然后拿着频道id和token访问uc接口拿资讯</li>
<li>设置定时任务10分钟访问一次验证接口获取token(?，必要性？直接token过期后再请求不好吗)，当访问资讯接口显示token过期时，手动调用验证接口获取token，并刷新redis的频道id+token</li>
</ul>
</li>
<li>导入黑名单，从在用户手机上匹配，到在redis中匹配，减少了用户的内存压力(?资讯app中的黑名单作用是什么，是否是浏览器话术遗留)</li>
</ul>
<h3 id="问点解析"><a href="#问点解析" class="headerlink" title="问点解析"></a>问点解析</h3><h4 id="咨询获取"><a href="#咨询获取" class="headerlink" title="咨询获取"></a>咨询获取</h4><p>1，参数为渠道（区分），子渠道，密钥 请求uc的token；提供接口供uc调用，接口内容为把渠道，子渠道，子渠道对应的token，作为hash结构保存到redis；再通过渠道，子渠道，+token的方式去获取uc的资讯；</p>
<p>2，问题</p>
<ul>
<li>为什么要分两步？<ul>
<li>使用token对比直接使用密钥，提高了安全性</li>
</ul>
</li>
<li>token会变，变了怎么办<ul>
<li>token变了之后，用户访问时拉取资讯会504，当出现504时，重新访问请求token接口</li>
</ul>
</li>
<li>返回的参数？<ul>
<li>资讯标题，副标题，分类，标题，作者名称，发版时间，缩略图，图片类型，修改时间</li>
</ul>
</li>
<li>接口安全性保证<ul>
<li>约定算法，根据客户端的参数计算出一个sign值，前端带入参数+sign值；后端拿到参数计算sign值，一样就好</li>
<li>请求时间不超过5分钟</li>
<li>对参数进行数据加密，使用非堆成加密，客户端使用公钥对参数加密，服务端使用私钥对参数进行解密</li>
<li>使用https协议，了解https为什么安全</li>
<li>把大数据曝光前50的快应用，以及通过省份和分类区分前50的快应用，今年和去年减少量，这个月和上个月减少量；写进xml文件，打压缩包ftp发送到目录<ul>
<li>快应用是展示事件，展示给用户后存快应用包名，通过count能排序出前50</li>
</ul>
</li>
</ul>
</li>
<li>资讯拉取引入了什么设计模式？<ul>
<li>工厂模式+模板方法模式</li>
<li>之前同事对接时，写死了uc，现在改用模板方法模式，写一个抽象类，提供验证和获取资讯两个模板抽象方法</li>
<li>每个资讯方写一个类继承抽象类，实现方法，使用applicationcontext.getBeanOfType(抽象类.class);可以把抽象类的实现类全部按照类名驼峰加载到spring里面，还会返回一个map，k是名字，v是载入的bean，这样就形成一个工厂，传入参数这个map就可以根据k找到不同的实现类；</li>
<li>了解三个工厂的知识，还知道哪些设计模式？</li>
</ul>
</li>
</ul>
<h4 id="后台反馈内容显示刷新资讯耗时过长"><a href="#后台反馈内容显示刷新资讯耗时过长" class="headerlink" title="后台反馈内容显示刷新资讯耗时过长"></a>后台反馈内容显示刷新资讯耗时过长</h4><p>1，问题</p>
<ul>
<li>在哪里反馈？<ul>
<li>应用反馈，直接存到数据库，运营在后台可以看到</li>
</ul>
</li>
<li>拿到优化需求后，怎么定位问题？<ul>
<li>链路追踪工具：利用postman模拟刷新资讯的请求，通过公司的链路追踪工具可以看到具体接口的耗时，发现在资讯里面插入广告时耗时严重，rpc请求每一个广告的时间在0.8秒左右，请求15条资讯的接口只要0.6s</li>
</ul>
</li>
<li>怎么保证拉取的资讯不重复？<ul>
<li>uc在返回资讯的时候，资讯列表里加一个游标(可能是字符串)，后端收到后连带游标发给前端，前端再次发请求时也带上这个游标，作用是UC标记资讯返回到哪个位置，防止返回重复的资讯</li>
</ul>
</li>
<li>如何优化时间过长问题？<ul>
<li>背景：运营可能会配置0-4个广告不等，广告模块提供的接口是请求单个广告，当运营配置插入4条广告时，会请求0.8*4&#x3D;3.2秒左右，他和拉取资讯串行，0.6+3.2&#x3D;3.8秒</li>
<li>优化：利用多线程<ul>
<li>将拉取资讯和拉取广告并发执行，最多耗时3.2秒广告时间，拉取资讯在这3.2s已经完成</li>
<li>将每次请求广告接口并发执行，拉取广告最多仅耗时0.8s，总耗时也就0.8s</li>
<li>在资讯和广告组装时，也就是接口快结束时，利用future.get()获取广告结果，如果广告执行过长，get()只等400ms，超过了没有get到就丢弃广告</li>
</ul>
</li>
</ul>
</li>
<li>优化广告代码逻辑</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//并行获取广告</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">    Futrue&lt;String&gt; f = Executors.newfixedThreadPool(<span class="number">10</span>).submit((广告id)-&gt;&#123;</span><br><span class="line">        <span class="comment">//获取广告</span></span><br><span class="line">        <span class="comment">//返回广告，json格式</span></span><br><span class="line">        <span class="keyword">return</span> ···;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//将广告id对应的future加入map，future里面有执行结果</span></span><br><span class="line">    map.put(广告id,f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取资讯</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//资讯中插入自营内容，banner，卡片等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取广告</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>,i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//遍历map，map.get(广告id).get(400ms)</span></span><br><span class="line">    <span class="comment">//将广告插入资讯</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优化完成，时间=0.6s获取资讯，每个广告最多等待400ms，加起来最多2.2s</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="负责bi报表的制作"><a href="#负责bi报表的制作" class="headerlink" title="负责bi报表的制作"></a>负责bi报表的制作</h4><p>事件：点击，曝光，不喜欢，阅读时长，视频播放时长</p>
<h4 id="配置黑名单"><a href="#配置黑名单" class="headerlink" title="配置黑名单"></a>配置黑名单</h4><ul>
<li><p>把运营给的黑名单网站存到redis里面，key会过大，拆封key，通过计算计算每个网站的hashcode，取模key的数量，计算出黑名单网站应该对应的key，会出现分布不均匀的问题，暂未找到更优解决；十万网址拆10个key，20w网址拆20个key;在点击资讯时，计算出hashcode取模拆分的key的个数，可以知道存在了那个key里面，之后在拿那个key对应的网址set进行ismembers操作。</p>
<ul>
<li>问题：扩容的时候重计算吗，不重计算出现扩容前后算法不一致问题，之前的数据无法读取到？</li>
</ul>
</li>
<li><p>使用的redis数据结构</p>
<p>string存储hash，渠道，子渠道，token</p>
<p>set 存黑名单网站，ismembers可以方便的查出是否在黑名单</p>
<p>zset 给广告点击量排名，在黄金时间7-9点放排名高的广告</p>
<ul>
<li>学习string，hash，zset的底层数据结构</li>
</ul>
</li>
<li><p>使用redis存储替代客户端存储的好处</p>
<ul>
<li>减少手机客户端大小</li>
<li>请求时在redis里面判断速度快</li>
<li>实时性问题，黑名单更新后需要重进客户端；使用redis则不需要用户重启软件</li>
</ul>
</li>
<li><p>逻辑升级：</p>
<ul>
<li>使用手机物理内存作黑名单时，在应用启动的时候去拉取黑名单保存在手机，等点击资讯时直接在手机内存中判断是否在黑名单网址集合中</li>
<li>使用redis作黑名单时：把黑名单存到redis的set集合，每一次点击资讯都判断资讯网址是否是在这个黑名单set里，是的话进行拦截</li>
</ul>
</li>
</ul>
<h4 id="定位redisoom问题"><a href="#定位redisoom问题" class="headerlink" title="定位redisoom问题"></a>定位redisoom问题</h4><p>问题：定位比较难的线上问题</p>
<h4 id="服务告警，防止异常无感知"><a href="#服务告警，防止异常无感知" class="headerlink" title="服务告警，防止异常无感知"></a>服务告警，防止异常无感知</h4><ul>
<li>公司的平台只能监控用户调用服务端的接口，服务端请求uc的接口没办法监控；</li>
<li>uc拉黑了公司的子渠道；导致线上资讯不展示</li>
<li>可以把每次服务端请求uc资讯的结果状态码通过大数据api存储到大数据平台（数据量过大不宜使用本地数据库），之后写一个定时任务，几分钟去计算下异常状态码的比率，大于5%的时候就发警告，通过短信，邮件，和电话</li>
</ul>
<h4 id="分布式锁的使用"><a href="#分布式锁的使用" class="headerlink" title="分布式锁的使用"></a>分布式锁的使用</h4><ul>
<li><p>浏览器模块和控制中台模块的同步问题</p>
</li>
<li><p>对某个用户推送资讯的时候，需要先去写申请，去审批中台审批，当审批提交时，中台正在处理，这时浏览器方面决定放弃推送，同时点击撤销，此时中台还在审批，过一会后审批成功；出现了浏览器端不推送，审批中台推送，的不一致的情况</p>
</li>
<li><p>解决，按照请求审批编号加分布式锁，保证撤销审批操作和中台审批操作串行执行；也就是撤销中途阻塞中台审批；中台审批的时候阻塞撤销操作</p>
</li>
</ul>
<h3 id="项目答疑"><a href="#项目答疑" class="headerlink" title="项目答疑"></a>项目答疑</h3>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>话术</tag>
      </tags>
  </entry>
</search>
